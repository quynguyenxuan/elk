{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/handler" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    // handler has some convenience methods used on node-handlers.
    type handler struct {}

    // Bitmask to configure which routes to register.
    type Routes uint32

    func (rs Routes) has(r Routes) bool { return rs&r != 0 }

    func FastHttpHandler(h http.HandlerFunc) fiber.Handler {
        return func(c *fiber.Ctx) error {
            ctx := c.Context()
            fasthttpH := fasthttpadaptor.NewFastHTTPHandlerFunc(h)
            fasthttpH(ctx)
            return nil
        }
    }
    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        const (
            {{ $n.Name }}Create Routes = 1 << iota
            {{ $n.Name }}Read
            {{ $n.Name }}Update
            {{ $n.Name }}Delete
            {{ $n.Name }}List
            {{ range $e := $n.Edges -}}
                {{ $n.Name }}{{ $e.Name | pascal }}
            {{ end -}}
            {{ $n.Name }}Routes = 1<<iota - 1
        )

        // {{ $n.Name }}Handler handles http crud operations on {{ $pkg }}.{{ $n.Name }}.
        type {{ $n.Name }}Handler struct {
            handler

            client    *ent.Client
            log       *zap.Logger
        }

        func New{{ $n.Name }}Handler(c *ent.Client, l *zap.Logger) *{{ $n.Name }}Handler {
            return &{{ $n.Name }}Handler{
                client: c,
                log:    l.With(zap.String("handler", "{{ $n.Name }}Handler")),
            }
        }

        // RegisterHandlers registers the generated handlers on the given chi router.
        func (h *{{ $n.Name }}Handler) Mount(r fiber.Router, rs Routes) {
            if rs.has({{ $n.Name }}Create) {
                r.Post("/", FastHttpHandler(h.Create))
            }
            if rs.has({{ $n.Name }}Read) {
                r.Get("/:id", FastHttpHandler(h.Read))
            }
            if rs.has({{ $n.Name }}Update) {
                r.Patch("/id", FastHttpHandler(h.Update))
            }
            if rs.has({{ $n.Name }}Delete) {
                r.Delete("/id", FastHttpHandler(h.Delete))
            }
            if rs.has({{ $n.Name }}List) {
                r.Get("/", FastHttpHandler(h.List))
            }
            {{ range $e := $n.Edges -}}
                if rs.has({{ $n.Name }}{{ $e.Name | pascal }}) {
                    r.Get("/:id/{{ $e.Name }}", FastHttpHandler(h.{{ $e.Name | pascal }}))
                }
            {{ end -}}
        }
    {{ end }}

    func stripEntError(err error) string {
        return strings.TrimPrefix(err.Error(), "ent: ")
    }

    func zapFields(errs map[string]string) []zap.Field {
        if errs == nil || len(errs) == 0 {
            return nil
        }
        r := make([]zap.Field, 0)
        for k, v := range errs {
            r = append(r, zap.String(k, v))
        }
        return r
    }
{{ end }}