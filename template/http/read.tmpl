{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/read" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // @Summary Read a {{ $n.Name }}
        // @Description Read a {{ $n.Name }}
        // @ID Read a {{ $n.Name }}
        // @Tags [{{ $n.Name }}]
        // @Accept  json
        // @Produce  json
        // @Param id path int true "{{ $n.Name }} ID"
        // @Success 200 {object} {{ $pkg }}.{{ $n.Name }}
        // @Failure 400 {object} main.HTTPError
        // @Failure 404 {object} main.HTTPError
        // @Failure 500 {object} main.HTTPError
        // @Router /{{ $n.Name | lower }}/{id} [get]
        // Read fetches the {{ $pkg }}.{{ $n.Name }} identified by a given url-parameter from the
        // database and renders it to the client.
        func (h *{{ $n.Name }}Handler) Read(c *fiber.Ctx) error {
            l := h.log.With(zap.String("method", "Read"))
            {{- template "helper/http/id-from-url" $n -}}
            var r http.Request
	        fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
            // Create the query to fetch the {{ $n.Name }}
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }}))

            {{- with edgesToLoad $n "read" }}
                // Eager load edges that are required on read operation.
                q{{ .EntQuery }}
            {{- end }}
            e, err := q.Only(r.Context())

            {{-
                template "helper/http/error-handling" dict
                "Errors" (list "not-found" "not-singular")
                "Logs" (list (printf "zap.Int(\"%s\", id)" $n.ID.Name))
                "Default" (print "could not read " ($n.Name | kebab))
            -}}

            l.Info("{{ $n.Name | kebab }} rendered", zap.Int("{{ $n.ID.Name }}", id))
            return c.JSON(New{{ (responseView $n $n.Annotations.Elk.ReadGroups).ViewName }}(e))
        }
    {{ end }}
{{ end }}