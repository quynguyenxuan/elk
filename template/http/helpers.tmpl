{{ define "helper/http/decode-and-validate-request" -}}
    {{/* gotype: entgo.io/ent/entc/gen.Type */}}
    
    if err := c.BodyParser(d); err != nil {
        l.Error("error decoding json", zap.Error(err))
        return c.Status(400).SendString("invalid json string")
	}
    {{ if needsValidation $ -}}
        // Validate the data.
        errs := make(map[string]string)
        {{- range $f := $.Fields }}
            {{- $checkRequired := and (not $f.Optional) (ne $f.Name $.ID.Name) }}
            {{- if $checkRequired }}
                if d.{{ $f.StructField }} == nil {
                    errs["{{ $f.Name }}"] = `missing required field: "{{ $f.Name }}"`
                }
            {{- end }}
            {{- if or $f.Validators $f.IsEnum }}
                {{- if $checkRequired -}}
                    else
               {{- else }}
                    if d.{{ $f.StructField }} != nil {
                {{- end }}
                    if err := {{ $.Package }}.{{ $f.Validator }}({{$f.BasicType (print "*d." $f.StructField) }}); err != nil {
                        errs["{{ $f.Name }}"] = err.Error()
                    }
                 {{- if not $checkRequired}}}{{ end }}
            {{- end }}
        {{- end }}
        {{- range $e := $.Edges }}
            {{- if not $e.Optional }}
                if d.{{ $e.StructField }} == nil {
                    errs["{{ $e.Name }}"] = `missing required edge "{{ $e.Name }}"`
                }
            {{- end }}
        {{- end }}
        if len(errs) > 0 {
            l.Info("validation failed", zapFields(errs)...)
            return c.Status(400).JSON(errs)
            
        }
    {{ end -}}
{{ end }}

{{ define "helper/http/id-from-url" }}
    // ID is URL parameter.
    {{- if $.ID.IsInt }}
        id, err := strconv.Atoi(c.Params("id"))
        if err != nil {
            l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
            return c.Status(400).SendString("id must be an integer greater zero")
        }
    {{ else }}
        id := c.Params("id")
    {{ end -}}
{{ end }}

{{ define "helper/http/error-handling" }}
    if err != nil {
        switch {
        {{- range $err := $.Errors }}
            {{- if eq $err "not-found" }}
                case ent.IsNotFound(err):
                    msg := stripEntError(err)
                    l.Info(msg, zap.Error(err){{ range $.Logs }}, {{ . }}{{ end }})
                    c.Status(404).SendString(msg)
            {{- else if eq $err "not-singular" }}
                case ent.IsNotSingular(err):
                    msg := stripEntError(err)
                    l.Error(msg, zap.Error(err){{ range $.Logs }}, {{ . }}{{ end }})
                    c.Status(400).SendString(msg)
            {{- else if eq $err "privacy" }}
                // Privacy case
            {{- end }}
        {{- end }}
        default:
            l.Error("{{ $.Default }}", zap.Error(err){{ range $.Logs }}, {{ . }}{{ end }})
            c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
        }
        return nil
    }
{{ end }}

{{ define "helper/http/pagination" -}}
    {{/* gotype: entgo.io/ent/entc/gen.Type */}}
    page := 1
    if d := c.Query("page"); d != "" {
        page, err = strconv.Atoi(d)
        if err != nil {
            l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
            return c.Status(400).SendString("page must be an integer greater zero")
        }
    }
    itemsPerPage := 30
    if d := c.Query("itemsPerPage"); d != "" {
        itemsPerPage, err = strconv.Atoi(d)
        if err != nil {
            l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
            return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
        }
    }
    es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
    if err != nil {
        l.Error("error fetching {{ $.Name | kebab | plural}} from db", zap.Error(err))
        return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
    }
{{ end }}