{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/create" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Create creates a new {{ $pkg }}.{{ $n.Name }} and stores it in the database.
        func (h {{ $n.Name }}Handler) Create(c *fiber.Ctx) error {
            l := h.log.With(zap.String("method", "Create"))
            // Get the post data.
            d := new({{ $n.Name }}CreateRequest)
            var r http.Request
	        fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
            {{- template "helper/http/decode-and-validate-request" $n -}}

            // Save the data.
            b := h.client.{{ $n.Name }}.Create()
            {{ range $f := $n.Fields -}}
                if d.{{ $f.StructField }} != nil {
                    b.Set{{ $f.StructField }}(*d.{{ $f.StructField }})
                }
            {{ end -}}
            {{ range $e := $n.Edges -}}
                if d.{{ $e.StructField }} != nil {
                    {{- if $e.Unique }}
                        b.{{ $e.MutationSet }}(*d.{{ $e.StructField }})
                    {{- else }}
                        b.{{ $e.MutationAdd }}(d.{{ $e.StructField }}...)
                    {{- end }}
                }
            {{ end -}}
            e, err := b.Save(r.Context())

            {{- template "helper/http/error-handling" dict "Default" (print "could not create " ($n.Name | kebab)) -}}

            // Reload entry.
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID(e.{{ $n.ID.StructField }}))

            {{- with edgesToLoad $n "create" }}
                // Eager load edges that are required on create operation.
                q{{ .EntQuery }}
            {{- end }}
            e, err = q.Only(r.Context())

            {{-
                template "helper/http/error-handling" dict
                "Errors" (list "not-found" "not-singular")
                "Logs" (list (printf "zap.Int(\"%s\", e.%s)" $n.ID.Name $n.ID.StructField))
                "Default" (print "could not read " ($n.Name | kebab)) " after update"
            -}}

            l.Info("{{ $n.Name | kebab }} rendered", zap.Int("{{ $n.ID.Name }}", e.{{ $n.ID.StructField }}))
            return c.JSON(New{{ (responseView $n $n.Annotations.Elk.CreateGroups).ViewName }}(e))
        }
    {{ end }}
{{ end }}