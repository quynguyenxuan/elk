{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/update" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Update updates a given {{ $pkg }}.{{ $n.Name }} and saves the changes to the database.
        func (h {{ $n.Name }}Handler) Update(c *fiber.Ctx) error {
            l := h.log.With(zap.String("method", "Update"))
            {{- template "helper/http/id-from-url" $n -}}
            // Get the post data.
            d := new({{ $n.Name }}UpdateRequest)
            var r http.Request
	        fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
            
            {{- template "helper/http/decode-and-validate-request" $n -}}

            // Save the data.
            b := h.client.{{ $n.Name }}.UpdateOneID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }})
            {{ range $f := $n.Fields -}}
                {{ if not $f.Immutable -}}
                    if d.{{ $f.StructField }} != nil {
                        b.Set{{ $f.StructField }}(*d.{{ $f.StructField }}) {{/* todo - what about slice fields that have custom marshallers? */}}
                    }
                {{ end -}}
            {{ end -}}
            {{ range $e := $n.Edges -}}
                if d.{{ $e.StructField }} != nil {
                    {{ if $e.Unique -}}
                        b.{{ $e.MutationSet }}(*d.{{ $e.StructField }})
                    {{ else -}}
                        b.{{ $e.MutationClear }}().{{ $e.MutationAdd }}(d.{{ $e.StructField }}...)
                    {{- end }}
                }
            {{ end -}}
            // Store in database.
            e, err := b.Save(r.Context())

            {{-
                template "helper/http/error-handling" dict
                "Errors" (list "not-found" "not-singular")
                "Logs" (list (printf "zap.Int(\"%s\", id)" $n.ID.Name))
                "Default" (print "could not update " $n.Name | kebab)
            -}}

            // Reload entry.
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID(e.{{ $n.ID.StructField }}))

            {{- with edgesToLoad $n "create" }}
                // Eager load edges that are required on update operation.
                q{{ .EntQuery }}
            {{- end }}
            e, err = q.Only(r.Context())

            {{-
                template "helper/http/error-handling" dict
                "Errors" (list "not-found" "not-singular")
                "Logs" (list (printf "zap.Int(\"%s\", id)" $n.ID.Name))
                "Default" (print "could not read " $n.Name | kebab) " after update"
            -}}

            l.Info("{{ $n.Name | kebab }} rendered", zap.Int("{{ $n.ID.Name }}", e.{{ $n.ID.StructField }}))
            return c.JSON(New{{ (responseView $n $n.Annotations.Elk.UpdateGroups).ViewName }}(e))
        }
    {{ end }}
{{ end }}