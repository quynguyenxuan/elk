// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/valyala/fasthttp/fasthttpadaptor"
	"go.uber.org/zap"
)

// @Summary Fetches Badge
// @Description Fetches Badge
// @ID Fetches Badge
// @Tags [Badge]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Badge
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /badge [get]
// Read fetches the ent.Badge identified by a given url-parameter from the
// database and returns it to the client.
func (h *BadgeHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Badge.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching badges from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("badges rendered", zap.Int("amount", len(es)))
	return c.JSON(NewBadge2492344257Views(es))
}

// @Summary Fetches Pet
// @Description Fetches Pet
// @ID Fetches Pet
// @Tags [Pet]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Pet
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /pet [get]
// Read fetches the ent.Pet identified by a given url-parameter from the
// database and returns it to the client.
func (h *PetHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Pet.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	// Eager load edges that are required on list operation.
	q.WithBadge()
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	return c.JSON(NewPet340207500Views(es))
}

// @Summary Fetches PlayGroup
// @Description Fetches PlayGroup
// @ID Fetches PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup [get]
// Read fetches the ent.PlayGroup identified by a given url-parameter from the
// database and returns it to the client.
func (h *PlayGroupHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.PlayGroup.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching play-groups from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("play-groups rendered", zap.Int("amount", len(es)))
	return c.JSON(NewPlayGroup3432834655Views(es))
}

// @Summary Fetches Toy
// @Description Fetches Toy
// @ID Fetches Toy
// @Tags [Toy]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Toy
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /toy [get]
// Read fetches the ent.Toy identified by a given url-parameter from the
// database and returns it to the client.
func (h *ToyHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Toy.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching toys from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("toys rendered", zap.Int("amount", len(es)))
	return c.JSON(NewToy36157710Views(es))
}
