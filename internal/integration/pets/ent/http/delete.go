// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/valyala/fasthttp/fasthttpadaptor"
	"go.uber.org/zap"
)

// @Summary Delete a Badge
// @Description Delete a Badge
// @ID Delete a Badge
// @Tags [Badge]
// @Accept  json
// @Produce  json
// @Param id path int true "Badge ID"
// @Success 200 {object} ent.Badge
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /badge/{id} [delete]
// Delete removes a ent.Badge from the database.
func (h BadgeHandler) Delete(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	err = h.client.Badge.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		default:
			l.Error("could-not-delete-badge", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("badge deleted", zap.Int("id", id))
	return c.SendString("Delete successfully")
}

// @Summary Delete a Pet
// @Description Delete a Pet
// @ID Delete a Pet
// @Tags [Pet]
// @Accept  json
// @Produce  json
// @Param id path int true "Pet ID"
// @Success 200 {object} ent.Pet
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /pet/{id} [delete]
// Delete removes a ent.Pet from the database.
func (h PetHandler) Delete(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	err = h.client.Pet.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		default:
			l.Error("could-not-delete-pet", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("pet deleted", zap.Int("id", id))
	return c.SendString("Delete successfully")
}

// @Summary Delete a PlayGroup
// @Description Delete a PlayGroup
// @ID Delete a PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Param id path int true "PlayGroup ID"
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup/{id} [delete]
// Delete removes a ent.PlayGroup from the database.
func (h PlayGroupHandler) Delete(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	err = h.client.PlayGroup.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		default:
			l.Error("could-not-delete-play-group", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("play-group deleted", zap.Int("id", id))
	return c.SendString("Delete successfully")
}

// @Summary Delete a Toy
// @Description Delete a Toy
// @ID Delete a Toy
// @Tags [Toy]
// @Accept  json
// @Produce  json
// @Param id path int true "Toy ID"
// @Success 200 {object} ent.Toy
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /toy/{id} [delete]
// Delete removes a ent.Toy from the database.
func (h ToyHandler) Delete(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	err = h.client.Toy.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		default:
			l.Error("could-not-delete-toy", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("toy deleted", zap.Int("id", id))
	return c.SendString("Delete successfully")
}
