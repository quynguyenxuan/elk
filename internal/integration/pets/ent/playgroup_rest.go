// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"net/http"
	"strconv"

	"entgo.io/ent/entc/integration/ent"
	"github.com/gofiber/fiber/v2"
	"github.com/masseelch/elk/internal/integration/pets/ent/playgroup"
	"github.com/valyala/fasthttp/fasthttpadaptor"
	"go.uber.org/zap"
)

// @Summary Read a PlayGroup
// @Description Read a PlayGroup
// @ID Read a PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Param id path int true "PlayGroup ID"
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup/{id} [get]
// Read fetches the ent.PlayGroup identified by a given url-parameter from the
// database and renders it to the client.
func (h *PlayGroupHandler) Read(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	// Create the query to fetch the PlayGroup
	q := h.client.PlayGroup.Query().Where(playgroup.ID(id))
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			c.Status(400).SendString(msg)
		default:
			l.Error("could not read play-group", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("play-group rendered", zap.Int("id", id))
	return c.JSON(NewPlayGroup3432834655View(e))
}

// Payload of a ent.PlayGroup create request.
type PlayGroupCreateRequest struct {
	Title        *string            `json:"title"`
	Description  *string            `json:"description"`
	Weekday      *playgroup.Weekday `json:"weekday"`
	Participants []int              `json:"participants"`
}

// @Summary Create a PlayGroup
// @Description create a PlayGroup
// @ID Create new PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup [post]
// Create creates a new ent.PlayGroup and stores it in the database.
func (h PlayGroupHandler) Create(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	d := new(PlayGroupCreateRequest)
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)

	if err := c.BodyParser(d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		return c.Status(400).SendString("invalid json string")
	}
	// Save the data.
	b := h.client.PlayGroup.Create()
	if d.Title != nil {
		b.SetTitle(*d.Title)
	}
	if d.Description != nil {
		b.SetDescription(*d.Description)
	}
	if d.Weekday != nil {
		b.SetWeekday(*d.Weekday)
	}
	if d.Participants != nil {
		b.AddParticipantIDs(d.Participants...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create play-group", zap.Error(err))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	// Reload entry.
	q := h.client.PlayGroup.Query().Where(playgroup.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", e.ID))
			c.Status(404).SendString(msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", e.ID))
			c.Status(400).SendString(msg)
		default:
			l.Error("could not read play-group", zap.Error(err), zap.Int("id", e.ID))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("play-group rendered", zap.Int("id", e.ID))
	return c.JSON(NewPlayGroup3432834655View(e))
}

// @Summary Delete a PlayGroup
// @Description Delete a PlayGroup
// @ID Delete a PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Param id path int true "PlayGroup ID"
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup/{id} [delete]
// Delete removes a ent.PlayGroup from the database.
func (h PlayGroupHandler) Delete(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	err = h.client.PlayGroup.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		default:
			l.Error("could-not-delete-play-group", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("play-group deleted", zap.Int("id", id))
	return c.SendString("Delete successfully")
}

// @Summary Fetches PlayGroup
// @Description Fetches PlayGroup
// @ID Fetches PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup [get]
// Read fetches the ent.PlayGroup identified by a given url-parameter from the
// database and returns it to the client.
func (h *PlayGroupHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.PlayGroup.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching play-groups from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("play-groups rendered", zap.Int("amount", len(es)))
	return c.JSON(NewPlayGroup3432834655Views(es))
}

// Payload of a ent.PlayGroup update request.
type PlayGroupUpdateRequest struct {
	Title        *string            `json:"title"`
	Description  *string            `json:"description"`
	Weekday      *playgroup.Weekday `json:"weekday"`
	Participants []int              `json:"participants"`
}

// @Summary Update a PlayGroup
// @Description Update a PlayGroup
// @ID Update a PlayGroup
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Param id path int true "PlayGroup ID"
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup/{id} [patch]
// Update updates a given ent.PlayGroup and saves the changes to the database.
func (h PlayGroupHandler) Update(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	// Get the post data.
	d := new(PlayGroupUpdateRequest)
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)

	if err := c.BodyParser(d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		return c.Status(400).SendString("invalid json string")
	}
	// Save the data.
	b := h.client.PlayGroup.UpdateOneID(id)
	if d.Title != nil {
		b.SetTitle(*d.Title)
	}
	if d.Description != nil {
		b.SetDescription(*d.Description)
	}
	if d.Weekday != nil {
		b.SetWeekday(*d.Weekday)
	}
	if d.Participants != nil {
		b.ClearParticipants().AddParticipantIDs(d.Participants...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			c.Status(400).SendString(msg)
		default:
			l.Error("could-not-update-play-group", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	// Reload entry.
	q := h.client.PlayGroup.Query().Where(playgroup.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			c.Status(404).SendString(msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			c.Status(400).SendString(msg)
		default:
			l.Error("could-not-read-play-group", zap.Error(err), zap.Int("id", id))
			c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
		}
		return nil
	}
	l.Info("play-group rendered", zap.Int("id", e.ID))
	return c.JSON(NewPlayGroup3432834655View(e))
}

// @Summary Get PlayGroup with Participants
// @Description Get PlayGroup with Participants
// @ID Get PlayGroup with Participants
// @Tags [PlayGroup]
// @Accept  json
// @Produce  json
// @Param id path int true "PlayGroup ID"
// @Success 200 {object} ent.PlayGroup
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /playgroup/{id}/participants [get]
// Participants fetches the ent.participants attached to the ent.PlayGroup
// identified by a given url-parameter from the database and renders it to the client.
func (h PlayGroupHandler) Participants(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "Participants"))
	// ID is URL parameter.
	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", c.Params("id")), zap.Error(err))
		return c.Status(400).SendString("id must be an integer greater zero")
	}
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	// Create the query to fetch the participants attached to this play-group
	q := h.client.PlayGroup.Query().Where(playgroup.ID(id)).QueryParticipants()
	// Eager load edges that are required on list operation.
	q.WithBadge()
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	return c.JSON(NewPet340207500Views(es))
}

const (
	PlayGroupCreateRoute Routes = 1 << iota
	PlayGroupReadRoute
	PlayGroupUpdateRoute
	PlayGroupDeleteRoute
	PlayGroupListRoute
	PlayGroupParticipantsRoute
	PlayGroupRoutes = 1<<iota - 1
)

// PlayGroupHandler handles http crud operations on ent.PlayGroup.
type PlayGroupHandler struct {
	handler

	client *ent.Client
	log    *zap.Logger
}

func NewPlayGroupHandler(c *ent.Client, l *zap.Logger) *PlayGroupHandler {
	return &PlayGroupHandler{
		client: c,
		log:    l.With(zap.String("handler", "PlayGroupHandler")),
	}
}

// RegisterHandlers registers the generated handlers on the given chi router.
func (h *PlayGroupHandler) Mount(r fiber.Router, rs Routes) {
	if rs.has(PlayGroupCreateRoute) {
		r.Post("/", h.Create)
	}
	if rs.has(PlayGroupReadRoute) {
		r.Get("/:id", h.Read)
	}
	if rs.has(PlayGroupUpdateRoute) {
		r.Patch("/:id", h.Update)
	}
	if rs.has(PlayGroupDeleteRoute) {
		r.Delete("/:id", h.Delete)
	}
	if rs.has(PlayGroupListRoute) {
		r.Get("/", h.List)
	}
	if rs.has(PlayGroupParticipantsRoute) {
		r.Get("/:id/participants", h.Participants)
	}
}
