// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/delete.tmpl
// template/http/handler.tmpl
// template/http/header.tmpl
// template/http/helpers.tmpl
// template/http/import.tmpl
// template/http/list.tmpl
// template/http/read.tmpl
// template/http/relations.tmpl
// template/http/request.tmpl
// template/http/response.tmpl
// template/http/rest.tmpl
// template/http/update.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\xb8\x11\xee\x20\x05\x31\x55\x0c\xdd\x4b\x81\x02\x0b\x9a\xb4\xcd\xd0\xa5\x59\x9c\xad\x0f\xed\x1e\x68\xf2\x24\xb1\x91\x49\x85\x3c\xc5\xc9\x34\xfd\xf7\x81\x92\x2c\x4b\x8e\x13\x58\x40\x02\x83\xbc\xfb\xee\xbb\xbb\xef\x8e\x75\x9d\x1c\x43\x66\xe9\xb1\xc4\xb7\x80\x86\x32\xcb\xb5\x4d\xd0\x50\xf8\x93\x49\x86\x86\x7f\x74\xa2\xcc\xe1\x38\x69\x9a\xa3\xa3\xba\x06\x85\xa9\x36\x08\x2c\xc7\xa2\x44\x97\xe4\x44\x65\x22\x1d\x0a\x42\x06\xf3\xa6\x39\x02\x00\xa8\x6b\x98\x95\xb7\x19\xbc\x7d\x07\x4b\xe1\x11\x66\xfc\xbd\x35\xa9\xce\xf8\x95\x90\xb7\x22\x43\x18\xd9\x99\x60\x35\x1b\x9d\x10\xae\xca\x42\xd0\x4e\x08\x87\x77\x15\x7a\x62\x80\x0f\x84\x46\x05\x3f\x76\x2a\x49\x5b\xc3\x80\x6d\xe2\xf7\x20\xed\xbf\x24\x81\xdf\x16\xd5\x6a\x25\xdc\x23\xbc\x6f\xef\x41\x74\x01\xf9\xa5\x58\x0d\x14\x82\xd9\x19\x7a\xe9\x74\x19\xc0\x40\xbe\x6c\x7a\x71\xb6\x01\x33\xb8\x7e\xc6\xe6\x46\x64\x1e\xbe\x4d\xee\xfe\x19\x2e\x4f\xa5\xc4\x92\x00\x7e\x78\x6b\x86\xc3\x2b\x67\x55\x25\x71\xe7\x74\x51\x49\x89\xde\xc3\x2f\xaf\x5f\x43\x6d\x97\x3f\x50\x52\x33\x94\xb6\x69\xf8\xfe\xe8\x1f\x84\x2e\x2a\x87\xf0\x66\xec\xb5\x12\xda\xf0\x4f\x37\x37\x57\xe7\xce\x59\xb7\xc7\xf6\xcd\xc1\xb6\xbf\x1e\x80\x7b\x6d\x2b\x42\x07\xc9\x88\xe1\x7f\x50\xd8\x35\x3a\x68\x1a\xf8\x56\x5a\x4f\x43\x45\xfa\x72\x76\x75\xf7\x20\x86\xc2\xee\xcb\x12\x84\x51\xe0\xc9\x3a\xf4\xa0\x09\xb4\x01\xca\x11\x94\x20\x11\x74\xc6\x5b\xcc\xb4\x32\x12\xa2\x7c\xda\x9c\x4f\xc2\xa8\x02\x5d\xdc\x87\x8b\x24\x1c\xa7\x7a\x89\x8e\xbf\xa7\x87\x18\x30\xb0\x87\xba\x75\x0f\x5f\x11\x34\x99\xf3\xc2\x66\xfc\xab\xa6\x3c\xfa\x57\x94\x7c\x41\x4e\x9b\x2c\x62\x2b\xa4\xdc\x2a\x76\x02\xac\x83\x62\x71\x3c\xf8\x25\x09\x7c\x44\x6a\x39\x85\x1c\x5b\x62\x7c\xb8\x55\x01\xd5\xe0\x3a\x9a\x30\xeb\x50\xae\x3b\x79\x6f\xa1\xee\x85\x03\x07\x41\xfa\xbc\xbf\x1b\xae\x52\xe1\x29\x5c\x08\x25\x4a\xb2\x2e\xcc\xd6\x3d\x3a\xea\xcd\x22\x19\x0e\x08\x1f\x28\x8a\x4f\xe0\x67\x77\x02\xe4\x2a\xdc\x02\xd7\xf5\xfc\x99\x11\x53\x28\xad\xc2\xb9\x30\x6a\x7e\x2f\x0a\xad\x04\xe1\x7c\x18\xbb\x99\x69\xa7\x7b\x9c\xea\x42\xdc\xe3\x50\xff\x6d\x9a\xcb\xae\x78\xb2\xd0\x68\x68\xda\x3e\xde\x57\x7f\xcc\x06\x9c\x30\x19\xc2\x2c\x6d\xf7\x80\xe1\x1f\x34\x16\xca\x0f\xab\x64\xf3\xe9\x14\x54\x0b\x96\x86\x4e\x54\x92\x5a\xbb\x20\x89\x9f\xde\x81\xd1\xc5\xa8\x7b\x03\x11\xbe\x40\xda\xe7\x12\x1d\xef\x87\x8a\x27\x10\xcd\x98\x64\x58\x39\x63\x4a\x5b\xde\xd8\xf3\x3e\x57\x19\xbe\x40\x1b\x0f\xa6\x1d\x1a\xa4\xd3\xe0\xf1\x97\xd1\x77\xd5\x30\xdc\x4f\xd3\xeb\x70\xff\xa8\x48\x84\xd5\xb5\x40\x1a\xe5\xb6\x1b\x2f\xde\x1b\x07\x0b\x7f\x30\xfe\xa9\x6a\x6b\xb7\x1f\x9e\x73\xfe\x4c\x04\xa3\x76\x03\xbc\x58\x58\x3c\x09\xd3\xd8\xbe\x1c\x3c\x08\x2c\x72\x5b\x39\xc7\x47\x07\xa8\xb8\x9d\xe5\x79\x1e\xe6\x5d\x9b\x8c\x81\xd2\x92\x80\x9d\x61\x2a\xaa\x82\x18\x44\xa5\xd3\x86\x80\x49\x5b\x15\x0a\x8c\xa5\xcd\xc6\x67\x10\x6d\x77\xd5\x2d\x2e\xc5\x32\x8e\x9f\x48\xfe\x1a\x0b\x2b\x54\x78\x28\xdd\xe3\x56\xf1\x77\x2f\x28\xfe\xcf\x0a\xdd\x63\x14\xf3\xaf\x39\x3a\x8c\xf6\x2e\x44\x7e\x71\x16\x61\xef\x76\x71\xb6\xdb\xb7\x9d\xa4\xd7\x9a\x72\xc0\xa0\xb5\x1b\xfb\x39\x70\x09\x0f\xe1\xce\xfb\x37\x22\x7c\x2e\x32\x74\xd0\x91\x6e\x05\x4a\xb9\x20\x10\x0e\x21\x4c\xb6\x76\xa8\x60\xfb\xe8\xd9\x12\x5d\xdb\x6a\x3e\x81\xb9\xab\x6b\xe0\xe7\x86\xda\x54\x60\x32\x04\x4f\xfa\xdb\xb7\xef\x1d\xdc\xf1\x2f\xa6\x78\x7c\xbe\x7b\x93\x08\x87\x77\x72\xe2\xc6\xda\x57\xc7\x33\x88\x0a\xed\x09\x98\xb1\x34\x4f\x6d\x65\x14\xeb\x7e\x7b\x6d\xb2\xaa\x10\x8e\x4d\xa5\xc9\x3e\xdb\x6c\x70\xea\xf4\x90\x02\x0b\x3b\xfe\xc2\x50\xf4\x9d\xbd\xf2\xdf\xd9\x09\x20\x7f\xe5\x63\xd6\xf7\xa4\xed\xd8\x93\xf6\xc4\x3b\xb8\x2f\x88\xcc\xa1\x50\xfb\x25\xc6\x40\xa4\xe1\xb1\xac\xca\xb0\x70\xd9\x80\x38\x91\x5e\xc1\x2f\x4c\x6a\x23\x36\xd1\x4f\x8b\x10\x56\x89\x43\xa3\xd0\x61\x78\x94\x36\x59\xb0\x41\x4e\xbd\x10\xdb\x8c\x9e\xd7\xd8\x26\x90\x43\xaa\x9c\x01\xc9\x7f\x5f\x7c\xb9\x8c\x2e\x71\x5d\xd7\x10\x39\xf4\xa5\x35\x1e\xff\xd6\xb8\x0e\x7a\x9b\x19\x7e\x6a\x8c\xed\xd6\x82\xe7\xe7\xc5\x6d\xbf\xd8\x3f\x3a\x5b\x95\x3e\xe6\xc1\xb0\x8f\x1b\x61\x8f\xde\x1c\xf5\xd3\xde\x34\xff\x07\x00\x00\xff\xff\x76\x44\x0c\xc5\x75\x0a\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 2677, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x6b\xeb\x36\x14\xfd\x9e\x5f\x71\x11\xdd\xb0\x4b\x22\x97\xd1\x7d\x29\x0c\x36\xea\xae\x0d\x8c\xad\xb4\x81\x7d\x68\xdf\x07\x45\xba\xb6\xd5\xca\x92\x9f\x7c\xdd\xd7\x3c\x3d\xff\xf7\x87\x62\xd7\x49\x4a\xa0\x15\x04\x2c\xdd\x73\x0f\x47\xf7\x1c\x25\x84\xec\x14\x4a\x47\x9b\x06\x2f\x00\x2d\x95\x8e\x6b\x97\xa1\xa5\xf8\x93\x59\x89\x96\x5f\x7b\xd1\x54\x70\x9a\xf5\xfd\x6c\x16\x02\x28\x2c\xb4\x45\x60\x15\x9a\x06\x7d\x56\x11\x35\x99\x42\x83\x84\x0c\x16\x7d\x3f\x03\x00\x08\x01\x4e\x9a\xe7\x12\x2e\xfe\x80\xb5\x68\x11\x4e\xf8\xa5\xb3\x85\x2e\xf9\xad\x90\xcf\xa2\x44\xd8\xc3\xd9\x88\x3a\x19\x0f\xb2\x0c\xfe\xbc\xef\xea\x5a\xf8\x0d\xe4\x5b\x52\x10\x03\x8a\xff\x2b\xea\xa9\x2f\xc2\x72\x6c\xa5\xd7\x0d\x69\x67\x3f\x82\x2e\xf3\x8f\x10\x2b\x51\xb6\xf0\x70\x50\xfb\x32\x15\xff\x92\x12\x1b\x02\x78\x6a\x9d\x9d\x0e\x6f\xbd\x53\x9d\xc4\xf7\xa7\xc2\x8b\x1a\xb4\x82\x46\x50\x05\xda\x12\x90\xef\x10\xd8\x01\x33\x2c\x73\xb6\x77\x5b\x29\xb1\x6d\xe1\xb7\xb3\x33\x08\x6e\xfd\x84\x92\xfa\x69\x7e\x7d\xcf\x8f\xeb\xfd\x5b\x68\xd3\x79\x84\xf3\xfd\xae\x5a\x68\xcb\x6f\x56\xab\xdb\x2b\xef\x9d\x3f\x82\x3d\xff\x34\xf6\xf7\x4f\xf0\xde\xb9\x8e\xd0\x43\xb6\xa7\xf0\x07\x18\xf7\x0d\x3d\xf4\x7d\x16\xb4\xea\xe1\x61\x08\xc6\x34\xca\xd1\x05\x8f\xb5\x7b\xc1\x76\x74\xe3\xd8\x45\xa1\xf0\xae\x06\xaa\x10\x94\x20\x11\x33\xc4\xb7\x1c\x45\x67\x25\x24\xd5\xa1\x8b\x37\xc2\x2a\x83\x3e\x1d\xe9\x13\x09\xa7\x85\x5e\xa3\xe7\x97\xf4\x9a\x02\x46\xd1\x10\xb6\xed\x71\x99\x98\xb7\x8a\x1b\x57\xf2\xff\x35\x55\xc9\x77\xd1\xf0\x7b\xf2\xda\x96\x09\xab\x91\x2a\xa7\xd8\x1c\xd8\x40\xc5\xd2\x74\xea\x0b\x61\x01\x84\x75\x63\x04\xbd\x4b\xbf\x56\x8b\x28\x77\xd1\x79\xc3\x62\x9e\xdf\x5e\x41\x5c\x2f\xc2\x83\x87\x08\xe3\x77\xf8\xb5\xc3\x96\xa6\x52\x21\x5a\x8a\x05\xa1\x44\x43\xce\xc7\x27\xf2\x82\x9e\x46\x58\x22\xe3\x01\xe1\x2b\x25\xe9\x1c\x7e\xf5\xf3\x6d\x92\x76\x72\xd0\x7b\x88\xf7\x90\x46\xa3\xa5\xc3\xe9\xf1\x41\xfd\x7f\x16\x97\x79\x12\x02\xe8\x22\x16\x97\x39\xbf\x11\xed\xb5\x5b\x6d\x9a\x08\x1a\x3a\x96\x39\x1f\xf7\x89\x56\x69\x08\x80\xa6\x8d\x3b\xad\xe2\xb7\x55\xd0\xf7\x29\xbf\x7a\x45\x99\xf8\x9d\x9e\x74\xb6\x3f\x95\xe9\x3b\xae\xe3\x13\xda\x7a\xb0\xa8\xa2\x4f\xda\x96\x0c\x94\x96\x74\xd0\xc6\xb6\xd1\x6a\x19\x24\x46\xb7\x04\xcc\x3a\x5a\x14\xae\xb3\x8a\xa5\x87\xb8\x7f\x5c\x39\xa1\x92\xc6\x6b\x4b\x05\xb0\x68\xe1\xd2\x52\xf2\xc8\x7e\x69\x1f\xd9\x1c\xb4\x4a\xd9\x78\xb9\x38\x91\xf4\x1d\x47\x8e\x85\xe8\x0c\xb1\x91\x00\x98\x74\x9d\x51\x60\x1d\xc1\x90\x57\x60\x7b\x89\x7e\xc6\xb5\x58\xef\x18\xa2\xb9\xbb\x2c\xf1\xa5\x2d\x5c\xc2\x0e\x9e\xc0\xb6\x21\x66\x78\x20\x8b\x71\x7a\x13\xc8\xa6\xa1\x8f\x4e\x0d\x62\x77\xec\x1e\xa9\xf3\x16\x24\xbf\x47\xab\xde\x52\x39\xbe\x9a\x76\xf8\xa7\x28\x3a\x63\x36\xe3\x58\xfa\xd9\xe4\xd2\xcf\x00\x00\x00\xff\xff\xdb\xab\x22\xfb\xc9\x05\x00\x00")

func templateHttpDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpDeleteTmpl,
		"template/http/delete.tmpl",
	)
}

func templateHttpDeleteTmpl() (*asset, error) {
	bytes, err := templateHttpDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/delete.tmpl", size: 1481, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xc1\x6f\xdb\x36\x14\xc6\xef\xf9\x2b\xbe\x09\x46\x21\x05\x32\x95\x6e\x37\x23\xbe\x2c\xcb\xba\x43\x57\x04\xd9\x86\x1d\x8a\x1e\x18\xe9\x59\x22\x2c\x93\x02\x49\x27\x5d\x1d\xfd\xef\x03\x49\x59\xa6\x6d\xb9\x68\x0e\x81\x45\xf2\x7b\x3f\x3e\x92\xef\x7d\xd9\xed\x8a\x6b\xd4\xca\xfe\xd7\xd1\x02\x24\x6d\xad\x98\x50\x05\x49\xeb\xfe\xca\xa2\x26\xc9\x3e\x68\xde\x35\xb8\x2e\xfa\xfe\x6a\xb7\x43\x45\x2b\x21\x09\x49\x63\x6d\x57\x34\x5c\x56\x2d\xe9\x04\x7d\x7f\x05\x00\xbb\xdd\x1c\x2f\xc2\x36\xa0\xaf\x96\x64\x85\x19\x92\x07\x5e\xae\x79\x4d\x49\x88\x48\x30\x1f\xa4\x41\x0e\x4b\x9b\xae\xe5\xd6\x01\x89\x57\x0e\xc5\x0e\x30\x38\xc6\x61\x14\x6b\xdb\x8e\x74\xe1\x73\x10\x9b\x4e\x69\x9b\x60\xe6\x94\x5e\x5a\x14\x18\x12\x43\xc3\x0d\x8c\xda\x10\x4a\x25\x9f\x49\x0a\x92\x25\x61\x43\xb6\x51\x95\xc1\xd6\x50\x05\x25\x21\x55\x45\xf3\x21\xc2\x30\x8f\x70\xf7\x31\x42\x8c\xd5\xdb\xd2\x62\x77\xc0\xff\x2a\xec\x86\x9b\x35\xac\x72\xe0\x95\xa8\xb7\x9a\xf0\xd2\x88\xb2\x81\x56\x5b\x4b\xc6\xad\x68\xaa\x85\xb1\xa4\x23\xe2\x63\x58\xdc\x0a\x69\x7f\xf9\x39\xd0\x56\x5b\x59\x22\xd5\x66\x58\xcb\x5c\xca\xa9\x1e\x47\x4f\x4a\xb5\xd8\x41\x93\xdd\x6a\x09\x6d\xde\x69\xfc\xb4\xc4\x0d\xfa\x28\xda\x58\x2d\xba\x7b\x69\xef\xb5\x56\x3a\x25\xad\x41\xee\x2b\xf3\x0b\xb2\xc6\x6e\xbc\xf0\x01\x13\xe6\x0d\xfb\x5b\x8b\xcd\x83\xa6\x95\xf8\xea\xa2\x58\x88\xcf\x72\x24\x24\xed\x02\x49\xe6\xe3\xe2\x9d\xbe\xf1\xee\x77\x41\x6d\x65\x9c\xde\x60\xc3\xbb\xcf\x81\xf5\x25\xfc\x64\xf8\xfc\xe5\x1b\xef\x98\x17\x45\xfb\x8a\x15\x7c\xc0\x72\x09\x29\x5a\xbc\xbe\xa2\x25\xe9\x19\x99\x9b\xbb\x89\xa4\x51\x9a\x52\xb4\xe3\xf4\xa1\x68\x34\x16\x4b\x6c\xf8\x9a\xd2\x68\xaf\x1c\x37\xd9\xa8\x58\x29\x8d\x75\x8e\x67\x27\xd4\x5c\xd6\x14\x36\x3f\xd9\x03\x4b\xf0\xae\x23\x59\xa5\x3a\x77\x07\x63\x7f\xf9\x23\xa4\x2e\x32\xcb\xa6\x36\x1e\xde\x60\xb8\x95\x43\x79\x1e\xb5\x45\x54\x99\x63\x77\xcc\x0f\x35\x3c\xeb\xd6\xb5\xcb\xeb\x89\x1b\xc2\x8c\xdd\xf9\xea\x61\x43\x93\x44\xb5\x3e\x93\x4e\x35\xdb\xcf\x94\x4a\x1a\x8b\x34\xee\x9c\x99\x64\x9f\xf8\xc6\xc5\xdc\x69\xe2\x96\x7c\xc5\xec\x2b\x6c\x89\xf7\xb8\xbd\x85\x50\x96\x4f\xc7\x3c\x12\xaf\xbc\x76\x7a\xf9\x9f\xae\xda\x23\xa7\x05\xbf\x51\x4b\xdf\x15\x7c\x14\xc6\x9e\x2d\x87\xd7\x98\x91\x3f\x9b\x64\xf7\x55\x4d\xe6\xc8\x11\xce\x30\x6e\x40\x61\xf0\x8a\x8e\x9b\x92\xb7\x2e\xfb\x53\xb0\x7b\x89\x13\x67\x89\xce\x3a\xde\xc9\xed\xad\xbb\x11\xcc\xf1\xde\x2b\xb3\xb1\xa1\x8f\xf4\x7f\x8c\xe6\xe1\x7e\x0d\xdc\x63\xa2\xd4\xdb\x0a\xaa\x23\xcd\xad\x50\xd2\x38\xdf\xd8\x3f\x67\xdf\xb3\xa3\xf8\xa8\xe1\x27\xb9\x7b\x3f\x19\xb3\x1d\x0a\xe5\x6a\x9c\x28\x5b\x41\xd2\xba\xaf\x6b\x92\x96\xdd\xf9\xe1\xb8\xda\xaa\x7a\xf8\xba\x76\x75\xfb\x51\xd5\x35\xe9\xb3\x5e\xfd\x44\x2f\x53\xbb\xa7\x65\xcc\xcc\xd1\xc6\x90\x0c\xd7\x93\x19\x9f\x39\xc8\xbb\x29\xd9\x71\x83\x85\x33\x2c\x50\xe6\x47\xd3\xad\xaa\x17\xfe\x97\xfd\x2b\x6c\x93\x46\x8d\x97\xec\xfb\x25\x47\x32\x85\x4f\xb2\x2c\x3f\x69\xcb\x83\x23\x3f\x0e\x66\x3b\x68\xcd\xe8\xbe\x06\xb6\x21\xd4\x24\xdd\xcb\x51\xb5\xbf\x6b\xff\x80\x7e\x45\x3c\x93\x44\xd9\x88\xe0\xdc\x83\x5b\x07\x57\x6e\xa6\xaf\x23\xc3\x9f\x6a\x2b\x6d\xaa\xb1\x12\x4f\xa4\x99\xaf\x2f\x9d\x23\x32\xf1\x23\xeb\xd3\x86\x39\x53\xbf\xd4\xb3\xd9\xa9\x33\xb1\x07\x65\x6c\x9a\x14\x49\x8e\x86\x05\xe1\x94\x1f\x5d\x20\x8f\x9d\x7d\xce\xfd\x40\x0e\xbb\x10\x95\x27\x3b\xe1\x1b\xb8\x91\x25\x4c\x64\xcc\x6d\xd9\x44\xec\x20\x7e\x03\x3d\xf2\x93\x73\x7a\x58\x8c\xf0\x61\xe2\x0d\xf8\xd1\x8d\x2e\x5d\x8a\xc7\x3a\xd5\x14\xf4\x47\x9d\xeb\xc2\xe6\xdf\xf1\xb0\xd3\x74\x4e\xde\xa9\x88\x42\xfb\xde\xe7\x38\x0d\xcb\x8e\x28\xfd\x25\x6b\x8c\xfe\x6b\xfd\x1f\x00\x00\xff\xff\xc2\xdd\xde\xe5\xf9\x09\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 2553, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x41\x8f\x9b\x3c\x10\xbd\xef\xaf\x78\xe2\xf4\x7d\xab\x2c\xa4\xb9\x75\x7b\xa2\x49\xb6\x45\x5d\x81\x14\xd8\xae\xf6\xe8\xc0\x60\x46\x25\xb6\x6b\x9b\xb2\x28\xe2\xbf\x57\x24\xa1\x6a\x52\x4b\xbe\x78\xde\x3c\xbf\xf7\x66\x8e\xc7\xe8\x1e\x52\xfb\xc1\xd0\x23\x48\x79\xa9\x43\xd6\x11\x29\x3f\xdd\x32\x92\xa4\xc2\x2f\x56\x98\x06\xf7\xd1\x38\xde\x1d\x8f\xa8\xa8\x66\x45\x08\x1a\x12\x15\xd9\x00\xe3\x78\x07\x00\x51\x84\xb5\x36\x83\x65\xd9\x78\xac\x96\x1f\x3e\x3e\x18\x4b\x8e\x94\xc7\x93\x28\x69\xaf\xf5\x8f\x0b\x6c\x46\x3f\x73\x49\xca\x51\x85\x4e\x55\x64\xe1\x1b\x42\x6c\x44\xd9\xd0\x5c\x59\xe0\x3b\x59\xc7\x5a\x61\x15\x2e\xf1\xdf\x04\x08\x2e\xa5\xe0\xff\x4f\x33\xcd\xa0\x3b\x1c\xc4\x00\xa5\x3d\x3a\x47\xf0\x0d\x3b\xd4\xdc\x12\xe8\xbd\x24\xe3\xc1\x0a\xa5\x3e\x98\x96\x85\x2a\x09\x3d\xfb\xe6\xf4\xd7\x85\x29\x9c\x79\xde\x2e\x3c\x7a\xef\x05\x2b\x08\x94\xda\x0c\xd0\xf5\xdf\x60\x08\x7f\x63\xe2\x74\x1a\xef\xcd\x63\x14\xf5\x7d\x1f\x8a\x93\x83\x50\x5b\x19\xb5\xe7\x1e\x17\x3d\x27\xeb\x6d\x9a\x6f\x1f\x56\xe1\xf2\xa6\xfb\x45\xb5\xe4\x1c\x2c\xfd\xec\xd8\x52\x85\xfd\x00\x61\x4c\xcb\xa5\xd8\xb7\x84\x56\xf4\xd0\x16\x42\x5a\xa2\x0a\x5e\x4f\x4e\x7a\xcb\x9e\x95\x5c\xc0\xe9\xda\xf7\xc2\xd2\x4c\x55\xb1\xf3\x96\xf7\x9d\xbf\x0a\x74\xd6\xcd\xee\x0a\xa0\x15\x84\x42\x10\xe7\x48\xf2\x00\x9f\xe3\x3c\xc9\x17\x33\xd1\x6b\x52\x7c\xcd\x5e\x0a\xbc\xc6\xbb\x5d\x9c\x16\xc9\x36\x47\xb6\xc3\x3a\x4b\x37\x49\x91\x64\x69\x8e\xec\x09\x71\xfa\x86\x6f\x49\xba\x59\x80\xd8\x37\x64\x41\xef\xd3\xb0\xdd\x24\x97\xa7\xa8\xa9\xfa\x93\x6b\x4e\x74\x25\xa5\xd6\x67\x69\xce\x50\xc9\x35\x97\x68\x85\x92\x9d\x90\x04\xa9\x7f\x91\x55\xac\x24\x0c\xd9\x03\xbb\x69\xf4\x0e\x42\x55\x33\x55\xcb\x07\xf6\xc2\x9f\x9e\xff\xf1\x18\xde\x64\xbb\xd6\x15\x41\x92\x22\x2b\xfc\x39\xda\x69\x9f\x17\xd8\x64\x48\xb3\x02\xdb\x4d\x52\x84\xd3\x3a\x93\xaa\x30\x8e\xbf\x03\x00\x00\xff\xff\xdd\x50\x7d\xa4\x06\x03\x00\x00")

func templateHttpHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHeaderTmpl,
		"template/http/header.tmpl",
	)
}

func templateHttpHeaderTmpl() (*asset, error) {
	bytes, err := templateHttpHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/header.tmpl", size: 774, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHelpersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x61\x6f\xdb\x36\x10\xfd\x3c\xff\x8a\x9b\x60\xa0\x52\x10\x53\x29\xd6\x4f\x2e\x32\xa0\x5d\x52\xc0\x43\x90\x78\xf5\xb6\x2f\x45\x81\x32\xe2\x49\xe6\x22\x51\xca\x91\xca\x96\xaa\xfa\xef\x03\x29\xd9\x96\x64\xb9\x69\x92\x6e\x02\x5a\xc7\xe2\xe9\x78\xf7\x9e\xde\x3b\xba\xaa\x40\x60\x2c\x15\x82\xb7\xc6\xb4\x40\x0a\xd7\xc6\x14\xa1\xc0\x28\x17\x38\xe3\x4a\xcc\xee\x78\x2a\x05\x37\x38\x23\xbc\x2d\x51\x1b\x0f\x66\x75\x3d\x01\x00\xa8\xaa\xf0\x08\x92\xdc\xdc\x17\x38\x07\x54\x26\xc9\x99\xcc\x43\x54\xc6\xfe\x8b\xc2\x04\x15\xfb\xfd\xbe\x40\x38\x0a\xdb\x07\xdc\x7f\x32\x06\x24\x82\xf9\x29\x44\xec\x6d\x2e\xee\x97\x9c\x34\x92\x2f\x82\xd7\xee\xfe\x8f\xa7\xa0\x64\x0a\x95\x8b\xb5\x57\xca\xce\x89\x72\xf2\x3d\xb4\x1f\xe0\x2a\x93\x2a\x81\xbf\x74\xae\xbc\x63\xf8\xcc\x8b\x36\x00\x89\x82\x60\xfb\x18\xa1\x29\x49\x41\xc4\x56\x86\x9b\x52\xfb\xaf\x4e\x4e\x02\xb6\x42\x25\x56\x86\xa4\x4a\x7c\x4f\x2a\xd7\x99\xcb\x03\xda\xdd\xf4\x82\xc9\x0f\x9b\xd6\x6c\x9d\x0a\x51\xe8\x3f\x9b\xfe\x65\xae\x60\xba\x6d\xdd\x5e\x61\x08\xed\x1a\x82\x59\x23\x08\x6e\x38\xdb\xae\x22\x91\xb6\x4d\x66\xfc\x06\xfd\x8c\x17\x1f\x9a\x2d\x3e\x36\x1f\xbb\x3a\xab\x6a\x06\xc4\x55\x82\x30\x8d\x6d\xfc\x94\xbd\x93\x98\x0a\x0d\x9d\x9d\x36\x71\xd3\x68\x8d\xd1\xcd\x7b\xbc\x2d\x25\xa1\xb0\xd1\x5c\x09\xf0\x55\x6e\x60\x1a\xb3\xab\xc2\x16\xc9\xd3\x00\x7c\x65\xb3\xb1\x4b\x9e\x21\x4c\xd9\xe2\xcc\xfd\x15\x8c\x65\x94\xf1\x30\xe9\x20\xa8\x65\x4c\xb0\xaa\xb2\x29\x57\x86\xca\xc8\xb8\x0a\xa1\xae\xe1\x74\x48\x56\xf7\xb2\x08\x7c\xf0\x9a\xe7\x5c\x29\x75\xed\x7d\x84\x53\xf8\x94\x49\xad\x2d\x83\xb4\xd9\x33\xb6\xf9\xe6\x30\x88\xfd\xb4\x97\x75\xbf\x7e\x54\x7b\x15\xb7\x6d\xe5\x64\x73\xb5\x04\xe5\xa4\xed\xb7\x85\x3e\x57\x65\x36\xd6\xe2\x38\x16\xb3\x91\x48\xd7\x59\xaa\x71\xb8\xe0\xaa\x49\x35\x8e\x65\xff\x3a\x88\x7b\x6f\xfc\x03\x0d\x76\x32\xb6\x42\xb2\x69\xd9\x92\x47\x37\x3c\xb1\xfb\xb7\xdb\x6c\x7b\x87\xba\xf6\xab\x6a\x1a\xb3\xb7\x5c\xcb\xc8\x49\xd2\x2f\x48\x2a\x03\xde\x91\x60\xde\xa0\x24\xfb\x9e\x1c\xd2\xe2\x1e\x10\x07\x28\x46\xa2\x56\x94\xc1\xe8\xb3\x23\x0d\xb5\x0c\xb8\x77\xb9\xc7\x42\x5d\xd7\x55\x75\x88\xe8\xc1\xed\x03\xb7\x5a\x7d\x61\xa3\xaf\x73\x91\xe0\xa8\xbc\x36\xdb\xe3\x56\x4a\x5f\x55\x03\x3e\x51\x0d\xf8\x80\x1a\x50\x24\x08\x83\xc8\x27\x68\x61\xe4\x96\x8c\x21\x45\x65\x8d\x52\x07\xf0\x33\x9c\x0c\x4a\x4d\xd9\x42\xc5\xb9\xef\xdd\xed\x1c\x2f\xe6\x32\x45\xd1\xd8\x6c\xe3\x4b\xcd\xd3\x8c\xb1\x3e\xb3\xa3\x76\xfb\xeb\xea\xea\xb2\x89\xef\xc5\x4e\xfa\x3d\xb4\xec\x5a\xb1\xed\x88\x9e\x1c\x18\x4c\x52\xcc\x62\xca\xb3\x59\x49\xa9\xb7\x69\x2d\x0c\x61\x71\x06\x52\xc3\x1f\xef\x2f\xa0\xe0\xc4\x33\x34\x48\x6c\xd2\xe1\xd5\xb9\xe0\x42\x2f\x94\xe9\xe1\x21\x8e\x37\x12\xd2\x86\xa2\x5c\xdd\xb1\x37\x26\x97\x7e\xc4\x96\x36\x8b\xf6\x3d\x29\xbc\xce\x4c\x69\x15\x37\x2a\x8b\xc1\x98\x4a\xd0\x18\xcb\xaa\x14\x60\xeb\x85\x92\xd2\x5d\x69\xed\xd8\xda\x4e\x22\x0b\xf0\x60\xcf\xc3\x83\xed\x20\xda\xbd\xe1\x26\x20\x2b\xb5\x81\x6b\x04\xae\x40\x2a\x83\x09\x12\x24\x84\xdc\x20\xc1\x67\xa4\xdc\x0b\x46\x68\x18\xf8\x97\x14\xcd\x98\xee\x56\xf6\x78\xca\x1c\x20\xb3\x35\x57\x22\xb5\x33\x76\xb3\xc1\x21\x30\xf5\xdf\xd2\x44\xeb\xce\x8d\xae\x82\x1b\xb2\xa6\x0d\x30\x87\x44\x8c\xb7\x4d\xa4\xa7\x72\x33\x8b\xf3\x52\x09\x6f\x4c\xc8\x11\xd7\x68\x8f\x2d\x6c\xa1\x2f\x73\xf3\xce\xc6\x39\xa8\xe7\xa3\xfa\xcd\x74\xd2\xbe\x27\xb2\x38\x57\x66\xc7\xcc\x68\x74\x2b\xa5\x4c\x27\x43\x22\xab\x6a\xd3\x0c\xbb\xc8\x13\xdb\xc2\xb1\x85\x93\x41\xc7\xe6\xc6\x73\x76\xd8\x7e\xd5\x63\x3b\xd3\x49\xb0\xef\x06\x96\xcb\x21\x18\xd6\x68\xca\x94\xd3\x37\xe0\xb1\x6a\x43\xbf\x23\x24\x4d\xc0\x7f\x85\xc9\xc9\x13\x30\x29\x48\xde\xf1\xe8\x7e\x14\x8e\x30\x84\x65\xb3\xec\x90\x79\x82\xdd\x0a\x8c\x79\x99\x9a\xf9\xb8\x4f\xb8\xa1\x7d\xd6\x84\x58\x8b\x7f\x3e\x28\x5b\x30\x62\x79\x8d\xd4\x7e\x59\x28\x83\xa4\x78\xba\x42\xba\x43\x72\xe9\xfb\x56\xe1\x16\xc0\x2d\xec\x79\x02\xec\xbc\x46\xc9\x74\xd2\x2c\x3c\xac\xf8\x82\x27\x52\xb9\x01\xf2\x8c\x1f\x0b\x85\x3d\xcc\xcc\x4f\xe1\xe5\xc6\x2d\x5a\x33\xfa\xad\x44\xba\xf7\x3d\xbb\xec\x05\xaf\x41\x58\x07\xf1\xbc\x8e\x5f\xd8\x95\xc6\xd7\x07\xb6\x2e\xbe\xd5\xc9\x9b\x31\xd8\x18\x79\xc1\xc9\x8d\xe7\x5b\xbb\xed\xce\xc2\xe1\x85\xdd\xe6\xc5\xc0\xc9\x5d\x51\xc7\x20\x9e\x6b\xdf\xae\xf7\xc7\x1a\x78\x6b\xab\x06\x33\xbd\x44\x5a\xb6\xf0\xfd\x74\x32\x8e\x5f\x37\x6e\x1c\xc7\x6e\xc4\xff\x80\x67\x77\xbb\x21\xae\xbd\x62\xbf\x03\xbe\x3d\x90\x9e\x86\x33\xea\xed\xd9\xe1\x96\x5d\xc8\x4c\x1a\xbf\x9b\x35\x60\x57\x71\xac\xd1\xf8\xbe\xe3\x72\x06\x2f\x03\x38\x82\x7e\xc4\x9b\x34\xf5\x89\xfd\x92\x2b\x83\xff\x18\xbf\xed\xe1\x10\x92\x83\xf3\x45\x8c\x26\x5a\x5b\x1c\x9d\x8d\xb8\x63\xe2\x17\xb8\xc1\x6b\x7e\x0d\x5f\xa0\x48\x4b\xe2\x69\x5d\x37\x47\x0f\x71\xfd\x88\x9f\xc9\xcf\xb4\x8e\x8e\x3b\xfc\x1b\x00\x00\xff\xff\x7b\xa1\x8f\xa7\x5a\x10\x00\x00")

func templateHttpHelpersTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHelpersTmpl,
		"template/http/helpers.tmpl",
	)
}

func templateHttpHelpersTmpl() (*asset, error) {
	bytes, err := templateHttpHelpersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/helpers.tmpl", size: 4186, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpImportTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xd1\x6a\xc4\x20\x10\x45\x9f\x9b\xaf\x18\xa4\x0f\xed\xc2\x66\xa0\xd0\x97\xfe\x40\xbf\x63\x36\x99\xa8\xc5\x38\xa2\xb3\x81\x20\xfe\x7b\x71\xb3\x7d\x29\xbb\x03\x57\xbc\x78\xe4\x72\xa7\x56\x3c\x81\x15\xdd\x13\x7f\x01\x47\xb5\x32\x7a\x41\x8e\xda\x35\xa1\xe5\x38\x7e\x67\x4a\x0e\x4e\xd8\xda\x30\xd4\x0a\x33\x2f\x3e\x32\x18\xc7\x21\x71\x46\xa7\x9a\xd0\xaf\x49\xb2\x1a\x38\xb7\x36\x00\x00\x1c\x1e\xde\x6e\xa6\x4f\xad\xa0\xbc\xa6\x40\xca\x60\x8e\x57\xec\x99\xc5\xc0\x2b\xdc\x3f\xf5\x31\xd6\xab\xbb\x5e\xc6\x49\x56\xb4\x72\x9e\x9c\xc7\xae\xed\xd3\x3c\x44\x56\x2a\x85\x39\x4c\x0e\x33\xc7\x99\xf3\x33\xca\x87\x7c\x45\xa6\xb2\xff\x14\x89\x8f\x21\x2b\x8b\xbf\x70\xc6\xe3\xdc\x3e\xcc\xf0\xf2\x1f\xd9\x28\xec\x14\x08\x17\x2a\x7a\xab\xfd\x77\xa1\x99\x92\xca\x3d\xfd\xbd\x2f\x89\xe3\xdc\x6b\xfd\x06\x00\x00\xff\xff\x1d\x71\x8c\xd0\x5e\x01\x00\x00")

func templateHttpImportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpImportTmpl,
		"template/http/import.tmpl",
	)
}

func templateHttpImportTmpl() (*asset, error) {
	bytes, err := templateHttpImportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/import.tmpl", size: 350, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x46\x10\xbd\xfb\x57\x3c\x10\x46\x41\x19\xf6\x32\x28\xd2\x4b\x80\x02\x0d\x12\x27\x71\x11\xb8\xae\x6d\xb4\x87\xa0\x87\x11\x39\x24\x37\x26\x77\x57\xb3\x43\x2b\x2a\xc3\xff\x5e\x2c\xa5\xc8\x52\x90\x22\x21\xc0\xcb\xcc\x9b\x37\x5f\x6f\x76\x1c\x8b\x33\x34\x5e\x37\x81\x5f\x80\x9d\x36\xde\x58\x5f\xb0\xd3\xf4\x97\x45\xc3\xce\xbc\x15\x0a\x2d\xce\x8a\x69\x3a\x39\x19\x47\x54\x5c\x5b\xc7\xc8\x5a\xee\x02\x4b\xd1\xaa\x86\xa2\xb3\x51\x33\x5c\x4c\xd3\x09\x00\x8c\x23\x4e\xc3\x43\x83\x17\xbf\x62\x49\x91\x71\x6a\x5e\x79\x57\xdb\xc6\xdc\x50\xf9\x40\x0d\xe3\x00\xe7\x12\xea\x74\x67\x28\x0a\xfc\x76\x37\xf4\x3d\xc9\x06\x6f\x58\xcb\x96\xe3\x16\x64\xae\xa9\xdf\x87\x25\xd4\x6b\x8e\xa5\xd8\xa0\xd6\xbb\xef\x20\xaf\x5e\x7f\x07\x70\x4f\x4d\xc4\x87\x23\xdf\x3f\x7b\xe7\xcb\xb2\xe4\xa0\xc0\xc7\xe8\xdd\xde\x78\x23\xbe\x1a\x4a\xfe\xca\x7a\x37\x94\x25\xc7\x88\x9f\x9f\x3d\xc3\x48\x22\xb4\x99\xf6\x93\x98\x26\xf3\xed\xe4\x6f\xc8\x76\x83\x30\x9e\xa7\x20\xbf\xfc\xc8\xa5\x4e\xe8\xc9\x3a\xf3\xee\xfe\xfe\xe6\x52\xc4\xcb\x37\xb0\xcf\x7f\x18\xfb\xcb\x0f\xf0\xde\xfa\x41\x59\x50\x1c\x54\xf8\x19\x9d\x5f\xb3\x60\x9a\xf0\xa1\x61\xdd\xcf\xe3\x96\xa9\x42\xbd\x1b\xa7\xb6\xfc\xbf\x0d\xc2\x56\xec\xd4\xd6\x96\x2b\x2c\x37\x20\x34\xf6\x91\x1d\x06\xe9\x2e\x02\x09\xf5\x9c\x32\xd6\xe2\xfb\xc4\xf2\x85\xbd\x22\xa5\x59\x30\xe4\x2a\x08\xeb\x20\x2e\xc2\x2a\xd4\xcf\xb9\xca\xce\xb2\x53\x33\xa3\xeb\xc1\x95\xc8\x5b\x9c\x1d\x65\x7d\x47\xae\xea\x58\x16\x78\x6f\xa3\xe6\x25\xce\x6a\xbb\x64\x31\xaf\xf4\xd3\x02\x9c\x7a\xc6\x38\x47\xa7\xaf\x4b\xc2\x6b\x4d\xe7\x1b\xf3\xb7\xd5\x36\xff\x97\x82\xb9\x53\xb1\xae\xc9\xb3\x9e\xb5\xf5\x55\x76\x8e\x2c\x11\x65\x8b\xc5\x3e\x6a\xb5\x8d\xda\x95\x72\x94\xdc\xfc\x39\xb0\x6c\xf2\x27\xec\x23\x09\x04\xe9\x3e\xcc\x2d\xaf\x06\x8e\xba\x77\xd5\x14\x35\x39\xa8\xa2\xa0\x5e\xd2\x7d\x3c\xb2\xe8\x0e\x96\x97\xc9\xa0\xfc\x49\xf3\xc5\x39\x7e\x92\x73\xa8\x0c\xfc\x44\x3c\x8e\x17\x58\x5b\x6d\xc1\x55\xc3\xf1\xde\xbf\xf7\x54\xa5\x4b\xca\xb6\x67\xb8\x93\xd7\x97\xaf\x28\x70\x49\x0d\x0b\xba\x04\x9b\x43\xa0\x2d\x29\x48\x18\xc2\xab\xc1\x0a\x57\xf0\x0e\x29\x1a\x3e\xb0\x50\x3a\x2b\x73\x44\xb2\x1a\x47\x98\x4b\xa7\x73\x8f\x87\x19\x52\x2d\xec\xaa\x43\x53\xea\x9b\x45\xb6\x13\x3f\x02\x2a\xf7\xa1\x23\xfd\xea\xf1\x08\xd4\x58\x37\xe7\xcc\x52\x17\xe9\x15\x79\xda\x92\xb9\x72\xb5\xcf\xb3\x23\x6d\x3e\xf0\x92\x96\xf8\x8c\xd0\x0d\x42\x5d\x52\x9b\xb0\xab\x58\x38\xad\x2c\xed\xf1\xca\x69\x9e\x51\xef\x07\xa7\xd9\x39\x3a\x76\x39\xc7\xc5\xc1\x16\xb7\xda\x42\x69\x7e\xbf\xfb\xe3\x3a\xbf\xe6\xf5\x38\x22\x17\x8e\xc1\xbb\xc8\x7f\x59\x5e\xa7\x3a\x4e\x9d\x79\xe9\x9c\xd7\xb9\xb2\x68\x2e\xbb\x07\x93\xd4\xf0\x56\xfc\x10\xe2\xc2\x24\xd8\x6e\xf3\x71\xa6\x9f\xd9\xa7\xf4\x42\x6e\xe7\xf1\x5f\x00\x00\x00\xff\xff\xe2\x9f\xe3\xa1\x5a\x05\x00\x00")

func templateHttpListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpListTmpl,
		"template/http/list.tmpl",
	)
}

func templateHttpListTmpl() (*asset, error) {
	bytes, err := templateHttpListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/list.tmpl", size: 1370, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdd\x6e\xdb\x46\x13\xbd\xf7\x53\x0c\x16\xfa\x3e\x90\x86\xb5\x0c\x8a\xf4\x26\x40\x81\x06\x96\x6b\xab\x08\x1c\xd7\x36\x9a\x8b\xa4\x17\x2b\xee\x90\xdc\x98\xda\xa5\x66\x87\x76\x54\x96\xef\x5e\x0c\x25\x53\xa2\xe1\x06\x21\x20\x40\xdc\x39\xe7\xec\xfc\x9c\x61\xd7\x65\xa7\x50\x06\xde\x36\xf8\x0e\xd0\x73\x19\xb4\x0b\x19\x7a\x96\x5f\x9e\x95\xe8\xf5\x25\x99\xa6\x82\xd3\xac\xef\x4f\x4e\xba\x0e\x2c\x16\xce\x23\xa8\x0a\xeb\x06\x29\xab\x98\x9b\x8c\xd0\x58\x05\xf3\xbe\x3f\x01\x00\xe8\x3a\x98\x35\x0f\x25\xbc\xfb\x05\x56\x26\x22\xcc\xf4\x79\xf0\x85\x2b\xf5\x8d\xc9\x1f\x4c\x89\x30\xe2\x66\x5e\x40\xb3\xfd\x7b\x96\xc1\xaf\x77\xed\x7a\x6d\x68\x0b\xb7\x68\x2c\x98\x41\xca\xeb\x6b\xb3\x1e\x49\x02\x5a\x60\xcc\xc9\x35\xec\x82\xff\x3e\x70\xb9\xf8\x7e\xfc\xde\x94\x11\x3e\x4f\x62\x7f\x8d\xc1\xf7\x79\x8e\x0d\x03\x7c\x8d\xc1\x8f\x87\x37\x14\x6c\x9b\xe3\xcb\x53\x43\x66\x0d\xce\x42\x63\xb8\x02\xe7\x19\x98\x5a\x04\x35\x51\x86\xe5\x42\x1d\xd5\x99\xe7\x18\x23\xfc\xf4\xe6\x0d\x74\x61\xf5\x15\x73\xee\xc7\xc6\xf5\xbd\x7e\x3d\xdf\xdf\x8c\xab\x5b\x42\x78\x7b\xcc\x5a\x1b\xe7\xf5\xd5\xfd\xfd\xcd\x05\x51\xa0\x57\xb0\x6f\x7f\x18\xfb\xf3\x0f\xe8\xde\x86\x96\x91\x20\x3b\xca\xf0\x1f\xa8\xc3\x13\x12\xf4\x7d\xd6\x39\xdb\xc3\xe7\x12\x79\xec\xe3\x30\x80\x02\x39\xaf\x30\x02\x57\xf8\x9f\x55\x82\xb3\xe8\xd9\x15\x0e\x2d\xac\xb6\x60\xa0\x74\x8f\xe8\xa1\xa5\x7a\xde\x48\x7f\x51\xae\x2d\x28\xac\x45\xe5\x59\xdd\x1a\x36\x83\xc9\x8c\xb7\x40\xe8\x2d\x52\x04\xc7\xc0\x61\xb8\x2b\xaf\x1d\x7a\xd6\x03\xba\x68\x7d\x0e\x49\x05\xa7\x93\x5b\xaf\x8c\xb7\x35\x52\x3a\xe4\x99\xe4\x70\x5a\xb8\x15\x92\x3e\xe7\x6f\x29\xa0\x14\x0e\xdd\xc0\x96\xa7\x16\xb7\x56\xba\x0e\xa5\xfe\xe4\xb8\x4a\xfe\x36\x8d\xbe\x63\x72\xbe\x4c\xd4\x1a\xb9\x0a\x56\x9d\x81\x12\x21\x95\xa6\x23\xab\xeb\xe6\xc0\xb8\x6e\x6a\xc3\x2f\xd6\xc6\xd9\xb9\xd4\x33\x6f\xa9\x56\x30\xf3\xe3\x02\xc9\xf3\x68\x08\x08\x04\xa6\x6f\x71\xd3\x62\xe4\x31\x54\x98\xc8\x12\x30\xd6\x34\x1c\x48\xb6\xeb\x11\x89\xf7\xb0\x24\x97\x03\xc6\x6f\x9c\xa4\x67\xf0\x7f\x3a\x1b\xbc\x78\x48\x27\xcb\xe0\x9c\x50\x72\x91\x06\x6d\x5a\xa4\xad\x74\x6b\x98\xd0\x38\x9f\xa9\xf5\xe4\xd9\xec\x6a\xdf\x37\x74\x82\xd1\x7f\x88\x48\x92\xea\x4f\x15\x12\x26\xaf\x1a\x43\x2f\x17\x12\x70\x85\xc4\x96\x0b\x7d\x65\xe2\x65\xb8\xdf\x36\xc2\xdf\x11\x96\x0b\xbd\x7f\x4f\x9c\x4d\xbb\x0e\xb0\x8e\xf2\xe6\xac\xfc\xf7\x16\xfa\x3e\x4d\x4f\x26\x5d\x7d\x72\x5c\x01\xda\x12\xe3\x7d\xf8\x10\x8c\x95\x1e\xaa\xdd\xb7\xe8\x28\xf3\x7d\xd1\x17\xa6\x44\x82\x5a\x60\x03\x05\xb8\x32\x0c\x86\x10\x08\x37\xad\x23\xb4\x10\x3c\x08\x1b\x42\x83\x64\xe4\xeb\xa2\x27\x22\x9b\xae\x03\x7d\xe1\x79\x28\xf7\xf8\x06\xc9\x65\x97\xe1\x78\x84\x67\xe2\x1e\xe9\xd9\x46\x7f\xf4\xf5\x36\xa1\xc3\x54\xa6\x55\x4c\xae\x78\xdd\x27\x83\x0f\xe7\x95\x38\xd5\xf9\x52\x81\x75\x39\x4f\x68\x6a\x58\xd1\xa8\x20\xa9\x5d\x64\x50\x3e\xf0\xbc\x08\xad\xb7\x6a\xf7\x3f\x3a\x5f\xb6\xb5\x21\x95\x4e\x69\x1f\x42\x39\x92\x92\x86\x9c\xe7\x02\x94\xb8\x7a\xe9\x39\xf9\xa2\xfe\x17\xbf\xa8\x33\x70\x36\x55\xfb\x01\xc9\x50\xd3\x17\x1a\x0b\x2c\x4c\x5b\xb3\xda\x0b\x80\xca\x43\x5b\x5b\xf0\x81\x77\xcd\x54\x90\x1c\xec\xf0\x80\x2b\xb3\x3a\x52\x10\xc7\x1f\xd6\x4b\x2f\x7d\x11\x12\x35\x31\xd0\xc0\x90\xaf\xc3\x6e\xb9\x51\x56\xec\x39\x43\x35\x3a\x67\xef\xc4\x5d\xb6\x07\x79\x42\x6e\xc9\x43\xae\x7f\xbf\xfb\x78\x9d\x5c\xe3\x53\xd7\x41\x42\x18\x9b\xe0\x23\xfe\xe9\xf0\x49\x1c\x33\xf3\xfa\xbd\xf7\x81\x87\x89\x47\x7d\x51\x3f\x68\x59\xe1\x4b\x0a\x6d\x13\x53\x2d\xb0\xbd\x7c\xf2\x5c\x7c\x7f\x32\x7a\xf2\xdf\x00\x00\x00\xff\xff\xad\xaf\xe8\x24\x41\x07\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 1857, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpRelationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\x38\x10\xde\x20\x05\x36\x55\x0c\xdd\x4b\x81\x01\x2b\xe2\x34\xf5\x10\xa4\x59\xe2\xad\x0f\xed\x1e\x68\xf1\x24\xb1\xa1\x49\x99\x3c\x25\xf5\x14\xfd\xf7\x81\xb2\xad\x44\xb6\x0c\xac\x0d\x2a\xc0\x80\x41\xde\x7d\x3c\x7e\xdf\x77\x27\xd5\x75\x72\x0a\xb9\xa5\x75\x89\x6f\x00\x0d\xe5\x96\x2b\x9b\xa0\xa1\xf0\x4b\x93\x1c\x0d\xbf\x70\xa2\x2c\xe0\x34\x69\x9a\x93\x93\xba\x06\x89\x99\x32\x08\xac\x40\x5d\xa2\x4b\x0a\xa2\x32\x71\xa8\x05\x29\x6b\x3c\x83\x49\xd3\x9c\x00\x00\xd4\x35\x8c\xca\xbb\x1c\xde\xfc\x06\x0b\xe1\x11\x46\xfc\xcc\x9a\x4c\xe5\xfc\x5a\xa4\x77\x22\x47\xe8\xe2\x46\x26\x04\x8d\x9e\xf2\x9c\x30\x39\xc2\x08\xdb\x65\xc3\xcf\x65\x8e\x7e\x17\x1e\x9e\x24\x81\xdf\x6f\xab\xe5\x52\xb8\x35\x5c\x20\xb5\x47\x19\x7e\x25\x96\x01\x14\x1e\x14\x15\xed\x12\x6e\x96\x1e\xa1\x14\x3e\x15\x3a\xec\xf5\x20\xa6\xe8\x53\xa7\xca\x50\xf7\x4b\x60\x66\xd3\x97\x64\xcf\x45\xee\xe1\x53\x2f\xf9\x9f\x5e\xc0\xdb\x34\xc5\x92\x00\xbe\x78\x6b\x7a\x1b\xd7\xce\xca\x2a\xc5\xa1\x1d\xe1\xc4\x12\x94\x84\x52\x50\x01\xca\x10\x90\xab\x10\x58\xbf\xc4\xd9\x94\xed\x31\x9a\xa6\xe8\x3d\xfc\xf2\xea\x15\xd4\x76\xf1\x05\x53\x6a\x3a\x15\x9b\x86\xf7\xb2\x7b\x99\xef\x84\xd2\x95\x43\x78\xfd\x3c\x73\x29\x94\xe1\xef\xe7\xf3\xeb\x73\xe7\xac\x3b\x12\xff\xfa\x9b\xe2\x7f\xfd\x9f\xf8\x37\xb6\x22\x74\x90\x3c\xab\xf8\x11\xb4\x7d\x40\x07\x4d\x93\xd4\x4a\x36\xc9\x33\x69\x9a\x06\x3e\xe5\x48\x3d\xd6\x8f\x28\x97\x21\xa5\x05\x7a\xa0\x02\xf7\x99\x79\x02\x13\x44\x22\x2d\x50\x02\xd9\xa1\xc0\x41\x0a\x95\x44\x43\x2a\x53\x28\x61\xb1\x06\x01\xb9\xba\x47\x03\x95\xd3\x93\x32\x68\x89\xe1\x3a\x99\xb3\xcb\x16\x50\x0a\x12\x6d\x4b\x09\x23\xc1\xa1\x91\xe8\x3c\x28\xda\x9d\x97\x6a\x85\x86\x78\x07\x9f\x55\x26\x85\xa8\xe8\x1b\xf4\xbd\x30\x52\xa3\x8b\x8f\xdc\x34\x4a\xe1\x34\x53\x0b\x74\xfc\x8c\xbe\xc6\x80\x81\x62\xa8\x3b\xc8\xf0\xe8\xd0\x9d\x05\xd7\x36\xe7\x1f\x15\x15\xd1\xbf\xa2\xe4\xb7\xe4\x94\xc9\x23\xb6\x44\x2a\xac\x64\xe3\x8d\xe5\x0e\xe1\x59\x1c\xf7\xb0\xea\x7a\x02\x84\xcb\x52\x0b\xda\x1b\x2c\x4a\x4e\xc2\xbd\x27\x95\xd3\x0c\x46\xa6\x9b\x2e\xbb\xe7\x5e\x38\x70\x10\x42\xf9\x0d\xae\x2a\xf4\xd4\xdb\xce\x84\xa7\xb0\x29\xa4\x28\xc9\xba\x30\x82\xee\xd1\xd1\x36\x34\x4a\xc3\x02\xe1\x57\x8a\xe2\x31\xfc\xec\xc6\x6d\x9f\xf4\x4b\x4b\x12\x38\x73\x18\xea\x0a\xdc\xae\x2a\x74\xeb\x40\x74\xeb\x84\x4e\xde\xee\x86\x77\xb8\x10\x8b\x43\x13\x28\x0f\x3d\x2f\xee\xc2\x7a\x27\xad\x36\x84\x6e\xe5\xeb\xa9\xc5\xff\x0c\xe7\x46\x31\xff\x58\xa0\xc3\x68\xd0\xd7\x7c\x36\x8d\x94\x8c\xe3\x4d\xec\x11\x59\x0f\x69\x57\x59\x08\xfc\xcb\xa8\x55\x85\xfb\x15\xed\x62\xda\x61\x86\x61\x0a\xcf\xed\xa5\x15\x32\x64\xcc\xd7\x25\x02\x73\x28\x24\x1b\x4a\xdb\x52\x77\x2e\x72\x74\xa0\x43\x4e\x9b\x0f\x54\x08\x02\xe1\x10\x1c\xae\x2a\xe5\x50\x82\x35\x10\x50\xc0\x96\xe8\xda\x77\x08\x1f\x04\x5b\xd5\x35\xf0\x73\x43\xed\xed\x8e\x15\x8a\x46\x86\xad\x83\x3d\x1c\x07\x0b\x07\x7e\x57\xfc\x83\xd1\xeb\xc8\x3d\x09\x1f\x1f\x86\xd7\xf5\x64\xb0\x86\x61\x8b\xb6\xcd\x31\x29\x42\x43\x29\x93\x33\x90\x2a\xa5\xc1\x74\xd6\x4e\x2a\xcf\x20\xd2\xca\x13\x30\x63\x69\x92\xd9\xca\x48\xb6\xf9\xef\x95\xc9\x2b\x2d\x1c\x8b\x87\xd3\x2f\x6d\xde\x25\x47\xa5\x53\x86\x32\x60\xa1\xed\x66\x86\xa2\xcf\xec\x27\xff\x99\x8d\x41\xc9\x38\x34\x0a\x9f\x4d\x5b\xf5\xe3\x23\x58\x53\xcc\x44\xa5\x89\x6d\x81\x80\xa5\xb6\xd2\x12\x8c\xa5\x8d\x1a\x6c\xdf\xad\x87\x38\x93\x21\xa6\x35\x9f\x99\xcc\x46\xdb\xbe\x0f\x26\x39\x68\x8d\xcd\xc4\xc2\x30\x1e\x76\xc5\x6f\xdf\x4c\xdb\x9a\xc3\x80\x18\x03\xf2\x67\x18\xb3\x69\x98\x2d\x55\x4a\xef\x14\xea\xa0\xf1\xc0\xbd\x1c\x52\xe5\x0c\xa4\xfc\x8f\xdb\x0f\x57\xd1\x15\x3e\xd4\x35\x44\x0e\x7d\x69\x8d\xc7\xbf\x15\x3e\x74\xb6\xdd\xa1\xbe\x35\xc6\xd2\xe6\xbb\x85\x9f\xeb\x3b\x7e\x83\x42\x5e\x38\x5b\x95\x3e\xe6\x21\x61\x5b\x4c\xb4\xcf\x62\x6b\x35\xed\xbf\xa3\x5f\x82\x76\x2f\xef\x97\xd6\x01\x3f\xb2\x5f\x8e\xcf\xe3\x52\xe4\xca\xb4\xc7\xb2\xee\x56\xdf\x65\x84\x47\x28\x75\xe5\x36\xaf\xd5\x21\x47\x88\xa5\xad\x0c\xb1\x31\x68\x34\x11\xfa\xf8\x87\x08\x7e\xa9\x3c\x0d\x08\xee\xdb\x03\x0f\x25\xdf\xb0\xb5\x5b\xea\x3e\x57\xb7\xeb\xdd\xbf\xff\x02\x00\x00\xff\xff\xbd\x60\xa5\x80\x53\x0b\x00\x00")

func templateHttpRelationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpRelationsTmpl,
		"template/http/relations.tmpl",
	)
}

func templateHttpRelationsTmpl() (*asset, error) {
	bytes, err := templateHttpRelationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/relations.tmpl", size: 2899, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\xd4\x30\x10\x85\xef\xfb\x2b\x9e\xa2\x1c\x76\x57\xd4\xe1\xbc\x12\x07\x44\x41\x54\x02\x5a\xd1\xe5\x84\x90\x3a\x9b\x4c\x1c\xd3\xec\xd8\x8d\x1d\x60\x65\xfc\xdf\x91\xb3\x4b\x5b\xa5\x3d\xc0\x21\x92\x3d\x7a\xf3\xfc\xbe\x97\x18\xd1\x70\x6b\x84\x51\x74\xdc\x3b\x1e\xaa\x2e\x04\x57\x0d\x7c\x37\xb2\x0f\x05\x52\x5a\x00\x40\x8c\xd5\x1a\xda\x86\x83\xe3\x0d\x58\x82\xb6\xca\xd8\x8a\x25\xe4\xaf\xae\x34\x8b\xda\x1e\x1c\x63\x5d\x9d\x16\xaa\x0a\x57\x74\xe8\x2d\x35\xb0\x2d\x08\x31\x62\x47\x9e\x51\xaa\x37\x56\x5a\xa3\xd5\x15\xd5\xb7\xa4\x19\x29\xa9\x18\x51\xaa\x4f\xb4\xcf\x17\x4c\x97\xeb\xda\x3a\x56\xaf\xeb\x60\xac\xe4\xe1\x29\x8e\x9a\xac\x73\x08\x3c\xde\x79\xba\xf2\x1b\x8e\x7c\x4d\x3d\x52\xfa\x7c\x5c\x85\x0f\xc3\x58\x07\xc4\xc9\xe2\x1e\x69\x7b\x79\x7e\xb9\xc1\x7b\xfa\x61\x44\x83\xfa\x1e\xce\x1a\x09\x3c\x78\x74\x3c\x30\x3c\xf3\xde\x43\x6c\xc0\x60\x74\x17\x14\x3e\xd2\x61\xc7\x08\x9d\xf1\xa8\x49\xb0\x63\x34\x56\x18\x46\x40\x62\x43\xc7\x03\x7e\xd2\x01\x4a\xa9\x87\x26\x8e\x6f\x9d\x61\x20\xd1\x8c\xb2\xc5\xe6\x15\x4a\xf5\xce\x70\xdf\x78\x3c\xd2\xfc\xd5\x99\x16\x76\xc0\x52\x78\x0e\x55\x8c\xae\xa1\xc0\xc5\x0a\xcb\x9c\xa8\x6c\xd5\xc5\x7e\x3f\x06\xda\xf5\xbc\x9a\x1b\x1d\xcd\xb2\xe6\x7a\xe2\x9e\x9e\xcb\x4d\xae\x8f\xd3\xe9\x67\xa5\x84\x9b\xef\xde\xca\xa6\x88\x11\x46\x1a\xfe\x85\xa5\x77\xbd\x09\x58\x06\xd2\x1f\xac\xbd\x1d\xdd\x83\xc5\x96\x34\x8a\x2c\x2f\x56\x28\x5e\x14\x2b\xbc\x44\x4a\xc5\xcd\x93\xfc\x2c\x0d\x66\xe8\x79\x74\xf6\x7c\x1d\x7c\xac\xe3\x6d\xa3\xf9\x99\x36\x50\xf2\x0c\x20\x27\x6d\xf3\xf8\x8b\x98\xbb\x31\x33\x64\x22\xee\x7d\x3e\x7e\xfd\x96\xcf\x72\xd2\x95\x3c\x61\xaa\x8b\xf3\xff\xc1\xe5\x7f\xc4\x9d\xa1\xa6\xc5\xfd\xd3\x8b\x3f\x01\x00\x00\xff\xff\xba\x6e\x4a\x6b\x54\x03\x00\x00")

func templateHttpRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpRequestTmpl,
		"template/http/request.tmpl",
	)
}

func templateHttpRequestTmpl() (*asset, error) {
	bytes, err := templateHttpRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/request.tmpl", size: 852, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpResponseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x8b\xdb\x30\x14\xbc\xe7\x57\x0c\xc6\x14\x3b\x64\xe5\x9e\x03\x39\x95\xb6\x97\x12\x0a\xdd\xee\x65\x59\x58\x6d\xfc\xec\xa8\x71\x24\x57\x92\x93\x16\xe3\xff\x5e\xe4\x6f\x07\x27\x6c\x0f\xbb\x87\x80\x65\xbd\x37\xf3\x66\xde\x38\x65\x89\x98\x12\x21\x09\xde\xde\xda\x3c\xd2\x64\x72\x25\x0d\x79\xb8\xab\xaa\x05\x00\x94\x65\xb4\x44\xaa\xec\xdf\x9c\xd6\x20\x69\x53\xc5\x84\x8a\x48\x5a\xf7\xdb\x45\x29\x49\xf6\x55\xf3\x7c\x8f\x65\xd4\x77\xdc\xe1\x2c\xec\x1e\xf4\xc7\x92\x8c\xe1\xc3\xfb\xce\x77\x07\x9e\x92\xd7\xb0\x0c\xe0\x4d\x39\x2c\x1d\xf3\x8c\x5b\x37\x04\xf1\x98\xb4\x07\x86\x1e\x0c\x0e\x63\x38\x8d\x6b\xb3\x9c\x74\x54\xcf\x2d\x8e\xb9\xd2\xd6\x83\xef\x2a\xfb\x29\x34\x97\x29\xc1\x97\x2b\xf8\x27\xac\x37\xe8\xd4\x3d\x08\x3a\x9b\xa6\xb6\x9b\xc2\xe9\x43\xd0\x1f\x5b\x32\x5f\xa2\xaa\x60\xac\x2e\x76\x16\xe5\xe4\xf6\x82\x23\x71\xf8\xfe\x89\x7d\x11\x94\xc5\x66\x8c\x7c\x09\x99\xb0\x1f\x35\x5e\x5d\xe9\xe0\xcb\x12\x22\x71\xef\xb7\x22\xcb\xf8\x4b\x46\x0f\x3c\x2b\x08\x55\xb5\xec\xc5\x37\x7d\xf7\x6e\xc6\xab\xc8\xad\xe9\x96\xa7\xdf\x94\x3a\x14\xf9\xc0\x74\xcf\x53\x78\xbf\x8c\x92\x9e\xa3\x7b\x76\x4f\x6b\xaf\x2c\x6b\x93\xbd\x9e\xe3\x79\x56\xde\xc8\xfc\x2b\xca\xa9\x55\xfe\x39\x4e\xe9\xa6\x70\xba\x22\x9c\xd8\x4f\x29\x7e\xcf\x28\x26\xe6\x16\xb5\xe5\x47\x6a\x5e\x88\x04\x52\xd9\x49\x83\x99\xe6\xe3\x35\xae\xd0\xdb\xb8\x52\xcd\x66\xc7\xe0\xf1\x69\xd9\x1d\xfa\x8a\x70\xb1\x18\xa3\xf9\xf9\x21\x75\x26\xbe\x70\x43\xf0\xd9\x27\x25\x13\x91\xb2\xf6\x9b\x19\xf7\x25\x85\xdc\x61\x4b\xe7\x0e\x30\x20\xd4\xe0\xae\xbf\xaa\x98\x7b\x3c\xb1\xad\x8a\x89\xb5\xa6\x85\xe8\xc9\x2f\xe2\xab\xc9\x16\x5a\xe2\x43\x77\xfd\x46\xe1\x5e\x83\xd8\xdc\xfb\xd5\x7b\x87\x6d\xdd\xf9\xf6\x5f\xa1\x0a\xa8\x61\x62\x73\x90\xe1\xab\x45\x0c\xa7\x6a\x71\x75\x99\x26\xa0\x3e\x2d\x37\x16\x3a\x24\x6b\xba\x32\x91\x20\x23\x19\x90\x09\xb1\xd9\xe0\xe3\xcc\xbf\x55\xbb\x72\x29\xb2\x1b\xc1\xd5\xce\xe0\x23\x3f\x50\xd0\x13\xad\x3a\xe0\x70\x52\x99\x28\x0d\xb1\x42\xbd\x91\x66\x3b\x74\x39\x53\x0d\xf8\x28\x9e\xb0\x99\xa6\x36\xbc\x35\x40\x33\xa5\x5e\x4c\xaf\x47\xce\x0e\x9f\xfc\xbf\x00\x00\x00\xff\xff\xdb\x60\xe7\xd1\xbe\x06\x00\x00")

func templateHttpResponseTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpResponseTmpl,
		"template/http/response.tmpl",
	)
}

func templateHttpResponseTmpl() (*asset, error) {
	bytes, err := templateHttpResponseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/response.tmpl", size: 1726, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpRestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x6a\x43\x21\x14\x05\xd0\xb9\xab\xb8\x3c\x32\x0a\x24\xce\xbb\x81\x4e\xbb\x05\xf9\xde\x7e\xa5\x46\xc5\xbc\xd2\x16\xf9\x7b\x2f\x36\x9f\xb4\x83\x50\x1c\x38\x10\x8e\xd7\xcb\x7b\xbd\xdb\x23\xd6\xa2\x5f\x95\x4f\x60\xd6\xb5\x9c\x63\xb1\xcc\x3a\xce\x62\x57\xe6\xf3\x73\x73\x35\xe0\x68\xb7\xcd\x98\xde\xe1\xf9\x1a\x33\x21\x8d\x57\x15\x6c\x9b\x01\x80\xde\x4f\xf8\x88\x1a\xc0\x4f\x65\xf6\x38\x40\x5e\xdc\xf2\xe6\x56\x0a\x84\x59\x05\xa7\x5d\xde\x34\x94\x97\x9a\x9c\x12\x12\xe8\x3c\x9b\xe0\xfc\x9b\x85\x11\xb1\xdf\xea\x2d\x66\x74\x33\x0f\xde\xa6\xca\x66\x83\x6a\xb5\xf1\x52\x4b\x53\xc1\xe1\xe7\xab\x7b\xab\xc7\xb8\xd1\x79\xc1\x6e\xff\xa7\x4b\xa3\x53\x4e\x62\xcf\xc4\x69\x9c\xe2\x98\xe0\x14\x7d\xaf\x7e\xbe\x44\x63\x72\x1a\x4b\xbe\x4e\xfa\xe0\xb2\x4f\x63\x05\x7f\xb4\xb9\x6f\xe1\x3b\x00\x00\xff\xff\x93\x8c\x1b\xe0\x22\x02\x00\x00")

func templateHttpRestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpRestTmpl,
		"template/http/rest.tmpl",
	)
}

func templateHttpRestTmpl() (*asset, error) {
	bytes, err := templateHttpRestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/rest.tmpl", size: 546, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x11\xd9\x20\x05\x31\x5d\x0c\xdd\x4b\x81\x62\x0b\xea\x34\xf5\xd0\xb5\x5d\x93\xae\x0f\xed\x1e\x68\xf1\x24\xb1\xa1\x49\x85\x3c\x25\xcd\x34\x7f\xf7\xe1\x24\x45\x91\x5c\xb5\xcd\xfb\x04\xd8\x90\xc8\xe3\xfd\xf9\xdd\xef\xee\xd8\x34\xcb\x23\x28\x3c\xdd\x56\xf8\x04\xd0\x51\xe1\xa5\xf1\x4b\x74\xc4\xbf\x6c\x59\xa0\x93\x67\x41\x55\x25\x1c\x2d\x77\xbb\x83\x83\xa6\x01\x8d\xb9\x71\x08\xa2\x44\x5b\x61\x58\x96\x44\xd5\xb2\xae\xb4\x22\x14\xb0\xd8\xed\x0e\x00\x00\x9a\x06\x0e\xab\xcb\x02\x9e\x3c\x85\x8d\x8a\x08\x87\xf2\x99\x77\xb9\x29\xe4\x1b\x95\x5d\xaa\x02\x61\x24\xe7\x58\xea\x70\xb4\x42\xb8\xad\xac\xa2\x3d\x13\x01\xaf\x6a\x8c\x24\x00\x3f\x13\x3a\xcd\xe7\xc4\x49\x46\xc6\x3b\x01\xe2\xce\x7e\xaf\xa4\xfd\x5b\x2e\xe1\xb7\xf3\x7a\xbb\x55\xe1\x16\xde\xb5\xfb\xa0\x3a\x83\xf2\x95\xda\x0e\x2e\xb0\xd8\x0a\x63\x16\x4c\xc5\xca\xbe\x27\xba\x5e\x7d\x4f\xe2\x42\x15\x11\x3e\x4c\xf6\xfe\x1e\x36\x4f\xb2\x0c\x2b\x02\xf8\x14\xbd\x1b\x16\xdf\x04\xaf\xeb\x0c\xf7\x57\x55\x50\x5b\x30\x1a\x2a\x45\x25\x18\x47\x40\xa1\x46\x10\x13\xcd\xb0\x5e\x89\x51\xb4\x59\x86\x31\xc2\xcf\x8f\x1e\x41\xe3\x37\x9f\x30\xa3\xdd\x90\x8a\xdd\x4e\xce\xfb\xfb\x5c\x19\x5b\x07\x84\xc7\xe3\x53\x5b\x65\x9c\x7c\x71\x71\xf1\xe6\x34\x04\x1f\x66\x64\x1f\x3f\x58\xf6\x97\x07\xe8\x7d\xeb\x6b\xc2\x00\xcb\x91\x87\xff\x82\xf5\x37\x18\x60\xb7\x5b\x36\x46\xef\xe0\x43\xa5\x28\x2b\x07\x24\xfb\x24\x74\x89\x8f\xa0\xa0\x30\xd7\xe8\xbe\x1a\x2d\x28\xa7\x21\xaa\x6b\x8c\x40\x25\x42\x56\x2a\x57\xf0\xbb\x6f\x3f\xb5\x22\xc5\x3c\x95\xad\xf6\xbc\x76\x19\x24\xe5\x34\xbd\x2f\x94\xd3\x16\x43\xda\x1b\x4e\x32\x38\xca\xcd\x06\x83\x7c\x46\x9f\x53\x40\x8e\x06\x9a\xf6\x38\x3f\x96\x39\x5d\x4a\xeb\x0b\xf9\xde\x50\x99\xfc\xa3\x2a\x79\x4e\xc1\xb8\x22\x11\x5b\xa4\xd2\x6b\x71\x0c\xa2\x53\x25\xd2\x74\x38\xd7\x34\x8b\xaf\xd0\xdf\xe8\x45\x1e\xfc\x76\x51\x07\x2b\x98\xfb\x77\x95\xd6\xc3\x71\x86\xd4\x46\x52\xf9\x48\x6d\x38\x72\xd8\xd5\xec\x8b\xc3\x9b\x64\x12\x4f\x67\xfb\x6d\x57\x54\xf7\x0e\x5c\xab\x00\x01\xd8\xa2\xec\xf7\x86\xad\x5c\x45\xe2\x0d\xa5\x55\x45\x3e\x70\x45\x5f\x63\xa0\x5e\x2c\xc9\x78\x81\xf0\x33\x25\xe9\x31\xfc\x14\x8e\x5b\xb6\xde\x2b\x7e\x40\x88\x1a\x33\xaf\x71\xa1\x9c\x5e\x5c\x2b\x6b\xd8\xbf\xc5\x50\xf5\x7d\xc8\xe3\x98\xcf\xd5\x35\x0e\xe9\xbb\x8f\x77\xd3\x61\x9f\x59\x83\x8e\xa6\x2c\x90\x5d\xd4\xaf\x1d\xae\x57\x0c\x87\xc9\x79\x73\xbd\x92\x2f\x54\x3c\xf3\x17\xb7\x15\x0b\x75\x27\xd6\x2b\xd9\x7f\x27\x46\xa7\x4d\x03\x68\x23\x7f\x19\xcd\xef\x4e\xc3\x6e\x37\x4e\x1b\x04\x26\x14\x1c\xe6\x6d\x33\x73\xf2\xb9\x41\xab\xe3\x24\x4b\xbd\xa0\xc9\xc1\x79\x82\xc3\x5c\xae\xb7\xdb\x9a\xd4\xc6\xe2\x17\x62\xfc\x98\x1c\x74\xeb\x7d\xce\xcc\xa9\x33\x6a\x55\x32\x95\x7f\x78\x0a\xce\xd8\x11\xdb\xc6\xcf\x46\x9e\x23\xcd\x1d\x4b\x8e\xe6\xd5\xa5\xd0\x8e\x00\xf2\xda\xc3\x02\x6e\x4a\x45\xa0\x36\xbe\x26\x88\xd6\x64\x08\x79\x17\x08\xf1\x7a\xc9\x80\x67\x75\x24\xbf\x85\xad\x0a\xb1\x54\xd6\x62\x88\xbf\x76\xb3\x61\xdf\x93\x2f\x22\x67\xd4\xc6\x91\xce\x2f\xf5\x40\x62\x0f\xe4\xa9\xe6\x3a\xdd\x07\x68\x00\x07\x1f\x0c\x4e\x9f\x6e\x94\xef\x9c\xb9\xaa\xe7\x31\xef\x00\xec\xf4\xfe\x51\x93\xe2\x81\x70\x8e\x34\x42\x6f\xdf\x5e\x3a\x67\xa7\xa5\xca\x43\xf5\x3f\xb3\xa8\xb8\xcb\x25\xe9\xde\xc6\x89\x6e\xd3\x36\x6f\x57\x4a\x39\x67\x7a\xd1\x53\xf3\x60\x3e\x11\x33\x88\x73\x1d\x91\x0f\x08\xc6\xed\xb5\x41\x7e\xf0\x98\x5b\x5b\x3b\xc6\x25\x97\x5b\x12\xee\xab\x3c\x3d\x18\xd7\xf4\xc4\xe2\x7c\x7d\xb7\x4d\x72\x51\x72\x23\x35\xae\x10\xa0\x4d\x46\x93\x63\xa2\x1d\x0a\x51\x40\x62\x4d\x24\x10\xce\xd3\x22\xf7\xb5\xd3\xa2\x7b\x8f\xc6\x15\xb5\x55\x41\x4c\x43\x17\x2f\x7d\x31\x1c\x4a\xaa\x60\x1c\xe5\x20\xb8\xe5\xae\x1d\x25\x1f\xc5\x8f\xf1\xa3\x38\x06\xa3\x53\xd1\x17\x36\x77\x83\x74\x4f\xc7\x0a\x73\x55\x5b\x12\xbd\x02\x10\x99\xaf\xad\x6e\x4b\xb5\x9b\x31\x20\x46\xa3\xe9\x12\x37\x6a\x73\xaf\x61\xbf\x33\xbd\x45\xeb\x95\xe6\xeb\x54\xb8\xbd\x07\xf3\xea\x1b\x8d\xe9\xcf\x1a\xc3\x6d\x92\xca\xf7\x25\x06\x4c\x66\xc7\xa0\x5c\xaf\x12\x94\x43\x77\xda\xe3\xe1\x34\x1b\x70\x63\xa8\x04\xe4\xda\xb9\xf0\x2f\xd9\x17\xbe\x2e\x65\x01\xc7\xb7\xa4\x91\xc3\xa7\xaa\xc0\x00\x9d\xd3\x6d\xc1\xb5\xf5\xae\x02\x02\x37\x60\x13\x50\x83\x77\x77\x40\xf8\x0a\x43\xcb\x50\x39\x51\x73\xd5\x34\x20\x4f\x1d\xb5\xa1\xc0\xa4\xa8\xbf\xa0\x65\xcf\xab\xa7\x70\x25\x5f\x3b\x7b\xfb\xbf\xa4\x55\x40\xa5\x67\x48\x05\x02\x54\xce\x97\xa1\xfe\x4e\x3b\x4f\x32\x2b\xd7\x2e\xf7\x89\x98\x30\xa5\x55\xc0\x4d\x30\xa0\xd3\x18\x90\x2f\x19\x77\xfe\x8a\x81\x38\x3d\xe5\xc4\x31\x7c\x8b\x4d\x77\x86\x02\x52\x1d\x1c\x64\xf2\xf7\xf3\xd7\xaf\x92\x57\x78\xd3\x34\x90\x04\x8c\x95\x77\x11\xff\x32\x78\xc3\xcc\x3a\x74\xf2\xc4\x39\xdf\xf5\xad\x28\x4f\xed\x65\x3f\x69\xcf\x82\xaf\xab\x98\x4a\x16\xec\xed\x26\x77\x18\xed\x0e\x86\x49\xfa\x5f\x00\x00\x00\xff\xff\xf2\x64\xbb\x33\x85\x0c\x00\x00")

func templateHttpUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpUpdateTmpl,
		"template/http/update.tmpl",
	)
}

func templateHttpUpdateTmpl() (*asset, error) {
	bytes, err := templateHttpUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/update.tmpl", size: 3205, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":    templateHttpCreateTmpl,
	"template/http/delete.tmpl":    templateHttpDeleteTmpl,
	"template/http/handler.tmpl":   templateHttpHandlerTmpl,
	"template/http/header.tmpl":    templateHttpHeaderTmpl,
	"template/http/helpers.tmpl":   templateHttpHelpersTmpl,
	"template/http/import.tmpl":    templateHttpImportTmpl,
	"template/http/list.tmpl":      templateHttpListTmpl,
	"template/http/read.tmpl":      templateHttpReadTmpl,
	"template/http/relations.tmpl": templateHttpRelationsTmpl,
	"template/http/request.tmpl":   templateHttpRequestTmpl,
	"template/http/response.tmpl":  templateHttpResponseTmpl,
	"template/http/rest.tmpl":      templateHttpRestTmpl,
	"template/http/update.tmpl":    templateHttpUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":    &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"delete.tmpl":    &bintree{templateHttpDeleteTmpl, map[string]*bintree{}},
			"handler.tmpl":   &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"header.tmpl":    &bintree{templateHttpHeaderTmpl, map[string]*bintree{}},
			"helpers.tmpl":   &bintree{templateHttpHelpersTmpl, map[string]*bintree{}},
			"import.tmpl":    &bintree{templateHttpImportTmpl, map[string]*bintree{}},
			"list.tmpl":      &bintree{templateHttpListTmpl, map[string]*bintree{}},
			"read.tmpl":      &bintree{templateHttpReadTmpl, map[string]*bintree{}},
			"relations.tmpl": &bintree{templateHttpRelationsTmpl, map[string]*bintree{}},
			"request.tmpl":   &bintree{templateHttpRequestTmpl, map[string]*bintree{}},
			"response.tmpl":  &bintree{templateHttpResponseTmpl, map[string]*bintree{}},
			"rest.tmpl":      &bintree{templateHttpRestTmpl, map[string]*bintree{}},
			"update.tmpl":    &bintree{templateHttpUpdateTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
